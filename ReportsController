using DevExpress.Compatibility.System.Web;
using DevExpress.DataAccess.Json;
using DevExpress.DataAccess.ObjectBinding;
using DevExpress.DataProcessing;
using DevExpress.XtraReports.UI;
using ibr.web.api.Interfaces;
using ibr.web.api.Models;
using Exteso;
using ibr.web.api.Models.Etiqueta;
using ibr.web.api.Models.Report.CarnePagamento.ReportCarnePagamentoTermicaPadrao;
using ibr.web.api.Models.Report.Cliente.ReportListaClienteA4Padrao;
using ibr.web.api.Models.Report.Compra.ReportRomaneioCompraA4Padrao;
using ibr.web.api.Models.Report.Credito.ReportCreditoTermicaPadrao;
using ibr.web.api.Models.Report.CupomTroca.ReportCupomTrocaTermicaPadrao;
using ibr.web.api.Models.Report.Devolucao.ReportDevolucaoA4Padrao;
using ibr.web.api.Models.Report.Devolucao.ReportDevolucaoTermicaPadrao;
using ibr.web.api.Models.Report.Etiqueta.ReportEtiqueta30Padrao;
using ibr.web.api.Models.Report.Etiqueta.ReportEtiqueta33Padrao;
using ibr.web.api.Models.Report.Caixa.ReportMovimentacaoCaixaA4DetalhadoPadrao;
using ibr.web.api.Models.Report.Caixa.ReportMovimentacaoCaixaA4Padrao;
using ibr.web.api.Models.Report.Caixa.ReportMovimentacaoCaixaTermicaDetalhadoPadrao;
using ibr.web.api.Models.Report.Caixa.ReportMovimentacaoExtraCaixaA4Padrao;
using ibr.web.api.Models.Report.Caixa.ReportMovimentacaoExtraCaixaTermicaPadrao;
using ibr.web.api.Models.Report.Orcamento.ReportOrcamentoA4Padrao;
using ibr.web.api.Models.Report.Orcamento.ReportOrcamentoTermicaPadrao;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemServicoAutocenterA4Padrao;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemServicoEquipamentoA4Padrao;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemServicoEquipamentoTermicaPadrao;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemServicoOticaA4Padrao;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemServicoOutrosA4Padrao;
using ibr.web.api.Models.Report.OrdemServico.ReportRevisaoVeiculoA4Padrao;
using ibr.web.api.Models.Report.Produto.ReportListaProdutoA4Padrao;
using ibr.web.api.Models.Report.MovimentacaoPontos.ReportMovimentacaoPontosA4Padrao;
using ibr.web.api.Models.Report.PlanoTransporte.ReportRomaneioPlanoTransporteA4Padrao;
using ibr.web.api.Models.Report.PlanoTransporte.ReportRomaneioPlanoTransporteEspeciePagamentoA4;
using ibr.web.api.Models.Report.TransferenciaEstoque.ReportTransferenciaEstoqueA4Padrao;
using ibr.web.api.Models.Report.Venda.ReportVendaA4Padrao;
using ibr.web.api.Models.Report.Venda.ReportVendaTermicaPadrao;
using ibr.web.api.Models.Security;
using ibr.web.api.Tools;
using Microsoft.Extensions.Options;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using ibr.web.api.Models.Report.OrdemServico;
using ibr.web.api.Models.Report.Financeiro.Recibo;
using ibr.web.api.Models.Report.Financeiro.Recibos;
using ibr.web.api.Models.Report.Contrato.ReportContratoA4Padrao;
using ibr.web.api.Models.Report.Contrato.ReportContratoTermicaPadrao;
using ibr.web.api.Models.Report.Financeiro.ContaReceber;
using ibr.web.api.Models.Report.ContaReceber.ReportContaReceberA4Padrao;
using ibr.web.api.Models.Report.ContaPagar.ReportContaPagarA4Padrao;
using ibr.web.api.Models.Report.Etiqueta.ReportEtiqueta65Padrao;
using ibr.web.api.Models.Report.Nfe.MinutaDespachoPadrao;
using ibr.web.api.Models.Report.Etiqueta;
using ibr.web.api.Models.Report.OrdemServico.ReportOrdemProducaoA4Padrao;
using ibr.web.api.Models.Report.Venda.ReportOrdemCompraA4Padrao;
using ibr.web.api.Models.Report.Nfce.ReportComprovantePagamentoNfce;
using ibr.web.api.Models.Report.Nfe.ReportRomaneioNfeA4Padrao;
using ibr.web.api.Models.Report.OrdemProducao;
using ibr.web.api.Models.Report.ServicoTerceirizado.ReportServicoTerceirizadoA4Padrao;
using DevExpress.XtraRichEdit.Import.OpenXml;

namespace ibr.web.api.Data
{
    public class ReportRepository : IReportRepository
    {
        ProjectionDefinition<ImpressaoPersonalizada> projecaoDispositivos = Builders<ImpressaoPersonalizada>.Projection.Exclude("Dispositivos").Exclude("DispositivoCriacao").Exclude("TokenOrganizacao");

        private readonly DbContext _context = null;
        private static ReportRepository instance;

        public static ReportRepository getInstance()
        {
            return instance;
        }

        /// <summary>
        /// Número de documentos na coleção
        /// </summary>
        public Task<long> TotalCount { get; set; }

        public ReportRepository(
            IOptions<DbSettings> settings)
        {
            _context = new DbContext(settings);
            instance = this;
        }

        #region Funções DAO
        //Cria uma impressão personalizada para a organização
        public async Task Create(ImpressaoPersonalizada item)
        {
            await _context.ImpressoesPersonalizadas.InsertOneAsync(item);
        }

        /// <summary>
        /// Altera o status do modelo de impressão para 'DELETADO'
        /// </summary>
        /// <param name="ImpressaoPersonalizada">Modelo de impressão a ser deletado</param>
        public async Task<bool> Delete(AuthenticatedUser user, ImpressaoPersonalizada impressaoPersonalizada)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(user);
            try
            {
                await ImpressaoPadraoRepository.getInstance().removerDaImpressaoPadrao(userNovo, impressaoPersonalizada);
                impressaoPersonalizada.IsDeleted = true;
                impressaoPersonalizada.DeletedAt = DateTime.Now;

                return await Update(impressaoPersonalizada);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //Pega todas as impressões da organização que podem ser personalizados e salvos
        public async Task<List<ImpressaoPersonalizada>> GetAll(AuthenticatedUser user)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(user);
            try
            {
                //pega os personalizados salvos
                List<ImpressaoPersonalizada> reports = await _context.ImpressoesPersonalizadas.Find(x => x.TokenOrganizacao.Equals(userNovo.TokenOrganizacao) && x.IsDeleted == false).ToListAsync();

                //pega também os padrões
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "CONTA A RECEBER", ModeloImpressao = "CONTA A RECEBER A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "CONTRATO", ModeloImpressao = "CONTRATO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "CONTRATO", ModeloImpressao = "CONTRATO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "DEVOLUÇÃO", ModeloImpressao = "DEVOLUÇÃO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "DEVOLUÇÃO", ModeloImpressao = "DEVOLUÇÃO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ETIQUETA", ModeloImpressao = "ETIQUETA 30 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ETIQUETA", ModeloImpressao = "ETIQUETA 33 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ETIQUETA", ModeloImpressao = "ETIQUETA 65 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ETIQUETA", ModeloImpressao = "ETIQUETA IMAGEM", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORÇAMENTO", ModeloImpressao = "ORÇAMENTO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORÇAMENTO", ModeloImpressao = "ORÇAMENTO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "PLANO TRANSPORTE", ModeloImpressao = "ROMANEIO PLANO TRANSPORTE A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "PLANO TRANSPORTE", ModeloImpressao = "ROMANEIO PLANO TRANSPORTE ESPÉCIE PAGAMENTO A4", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "VENDA", ModeloImpressao = "VENDA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "VENDA", ModeloImpressao = "VENDA TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACAO CAIXA", ModeloImpressao = "MOVIMENTACAO CAIXA A4 DETALHADO PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACAO CAIXA", ModeloImpressao = "MOVIMENTACAO CAIXA A4 DETALHADO COM VENDAS", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACAO CAIXA", ModeloImpressao = "MOVIMENTACAO CAIXA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACAO CAIXA", ModeloImpressao = "MOVIMENTACAO CAIXA TÉRMICA DETALHADO PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACAO CAIXA", ModeloImpressao = "MOVIMENTACAO CAIXA TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACÃO EXTRA CAIXA", ModeloImpressao = "MOVIMENTACÃO EXTRA CAIXA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MOVIMENTACÃO EXTRA CAIXA", ModeloImpressao = "MOVIMENTACÃO EXTRA CAIXA TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "MINUTA DE DESPACHO", ModeloImpressao = "MINUTA DE DESPACHO PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A RECEBER", ModeloImpressao = "RECIBO CONTA A RECEBER TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A RECEBER", ModeloImpressao = "RECIBO CONTA A RECEBER A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A RECEBER LOTE", ModeloImpressao = "RECIBO CONTA A RECEBER TÉRMICA LOTE", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A RECEBER LOTE", ModeloImpressao = "RECIBO CONTA A RECEBER A4 LOTE", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A PAGAR", ModeloImpressao = "RECIBO CONTA A PAGAR TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "RECIBO CONTA A PAGAR", ModeloImpressao = "RECIBO CONTA A PAGAR A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ROMANEIO COMPRA", ModeloImpressao = "ROMANEIO COMPRA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ROMANEIO NFE", ModeloImpressao = "ROMANEIO NFE A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM DE COMPRA", ModeloImpressao = "ORDEM DE COMPRA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM DE PRODUÇÃO", ModeloImpressao = "ORDEM DE PRODUÇÃO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM DE PRODUÇÃO", ModeloImpressao = "ORDEM DE PRODUÇÃO DETALHADO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO AUTOCENTER", ModeloImpressao = "ORDEM SERVICO AUTOCENTER A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO EQUIPAMENTO", ModeloImpressao = "ORDEM SERVICO EQUIPAMENTO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO EQUIPAMENTO", ModeloImpressao = "ORDEM SERVICO EQUIPAMENTO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO ÓTICA", ModeloImpressao = "ORDEM SERVICO ÓTICA A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO PETSHOP", ModeloImpressao = "ORDEM SERVICO PETSHOP A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "ORDEM SERVICO OUTROS", ModeloImpressao = "ORDEM SERVICO OUTROS A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "CARNÊ PAGAMENTO", ModeloImpressao = "CARNÊ PAGAMENTO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "CRÉDITO", ModeloImpressao = "CRÉDITO TÉRMICA PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });
                reports.Add(new ImpressaoPersonalizada() { TipoImpressao = "SERVIÇO TERCEIRIZADO", ModeloImpressao = "SERVIÇO TERCEIRIZADO A4 PADRÃO", TokenOrganizacao = userNovo.TokenOrganizacao });

                return reports;
            }
            catch (Exception ex)
            {
                ErroSincronizacaoRepository.getInstance().RegisterError(ex, "GetAll - ImpressaoPersonalizada", "ReportRepository", userNovo);
                throw ex;
            }
        }

        /// <summary>
        /// Localiza um modelo de impressão pelo Id informado.
        /// </summary>
        /// <param name="_user"></param>
        /// <param name="id"></param>
        /// <param name="ignorarProjecao"></param>
        /// <returns></returns>
        public async Task<ImpressaoPersonalizada> GetById(AuthenticatedUser _user, string id, bool ignorarProjecao)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            try
            {
                IFindFluent<ImpressaoPersonalizada, ImpressaoPersonalizada> result = _context.ImpressoesPersonalizadas.Find(x => x.TokenOrganizacao.Equals(userNovo.TokenOrganizacao) && x._id == id);

                TotalCount = result.CountDocumentsAsync();
                if (ignorarProjecao)
                {
                    return await result.Limit(Program.LimiteRegistros).FirstOrDefaultAsync();
                }
                else
                {
                    return await result.Limit(Program.LimiteRegistros).Project<ImpressaoPersonalizada>(projecaoDispositivos).FirstOrDefaultAsync();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //Pega a impressão personalizada da organização por tipo de impressão e modelo
        public async Task<ImpressaoPersonalizada> GetByTipoImpressaoModelo(string tokenOrganizacao, string tipoImpressao, string modelo)
        {
            try
            {
                ImpressaoPersonalizada report = await _context.ImpressoesPersonalizadas.Find(x => x.TokenOrganizacao.Equals(tokenOrganizacao) && x.TipoImpressao.Equals(tipoImpressao) && x.ModeloImpressao.Equals(modelo) && x.IsDeleted == false).FirstOrDefaultAsync();
                return report;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //Atualiza uma impressão personalizada para a organização
        public async Task<bool> Update(ImpressaoPersonalizada impressaoPersonalizada)
        {
            FilterDefinition<ImpressaoPersonalizada> filter = Builders<ImpressaoPersonalizada>.Filter.Eq(x => x._id, impressaoPersonalizada._id) &
                                                              Builders<ImpressaoPersonalizada>.Filter.Eq(x => x.TokenOrganizacao, impressaoPersonalizada.TokenOrganizacao) &
                                                              Builders<ImpressaoPersonalizada>.Filter.Eq(x => x.TipoImpressao, impressaoPersonalizada.TipoImpressao) &
                                                              Builders<ImpressaoPersonalizada>.Filter.Eq(x => x.ModeloImpressao, impressaoPersonalizada.ModeloImpressao);
            UpdateDefinition<ImpressaoPersonalizada> update;

            update = Builders<ImpressaoPersonalizada>.Update
                        .Set(_customReport => _customReport.XmlImpressao, impressaoPersonalizada.XmlImpressao)
            #region PropriedadesDefault
                        .Set(_customReport => _customReport.UpdatedAt, DateTime.Now)
                        .Set(_customReport => _customReport.DeletedAt, impressaoPersonalizada.DeletedAt)
                        .Set(_customReport => _customReport.IsDeleted, impressaoPersonalizada.IsDeleted);
            #endregion
            try
            {
                UpdateResult actionResult = await _context.ImpressoesPersonalizadas.UpdateOneAsync(filter, update);
                return actionResult.IsAcknowledged && actionResult.ModifiedCount > 0;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<bool> CreateOrUpdate(AuthenticatedUser _user, string xmlReport, string parametros, bool create)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            try
            {
                string tipoImpressao = Functions.GetTextFromQueryParameter(parametros, "tipoImpressao");
                string modeloImpressao = Functions.GetTextFromQueryParameter(parametros, "modeloImpressao");
                string tokenOrganizacao = Functions.GetTextFromQueryParameter(parametros, "tokenOrganizacao");

                ImpressaoPersonalizada impressao = new ImpressaoPersonalizada();

                if (create)
                {
                    //Busca o report pra ver se já existe
                    XtraReport report = ReportRepository.getInstance().GetXtraReport(tokenOrganizacao, tipoImpressao, modeloImpressao);
                    if (report != null)
                        throw new Exception($"Já existe um modelo com o nome '{modeloImpressao}'");

                    impressao.TipoImpressao = tipoImpressao;
                    impressao.ModeloImpressao = modeloImpressao;
                    impressao.TokenOrganizacao = tokenOrganizacao;
                    impressao.XmlImpressao = xmlReport;
                    Create(impressao);
                }
                else
                {
                    impressao = GetByTipoImpressaoModelo(tokenOrganizacao, tipoImpressao, modeloImpressao).Result;
                    impressao.XmlImpressao = xmlReport;
                    Update(impressao);
                }

                return true;
            }
            catch (Exception ex)
            {
                ErroSincronizacaoRepository.getInstance().RegisterError(ex, "ReportRepository", "CreateOrUpdate", userNovo);
                throw ex;
            }
        }

        #endregion

        //Pega o XtraReport de acordo com a organização, tipo e modelo de impressão
        public XtraReport GetXtraReport(string tokenOrganizacao, string tipoImpressao, string modeloImpressao)
        {
            XtraReport report = null;

            //verifica se o modelo a editar é um dos padrões => se for um dos padrões nem vai no banco ver os personalizados
            switch (modeloImpressao)
            {
                case "CARNÊ PAGAMENTO TÉRMICA PADRÃO":
                    return new ReportCarnePagamentoTermicaPadrao();
                    break;
                case "CRÉDITO TÉRMICA PADRÃO":
                    return new ReportCreditoTermicaPadrao();
                    break;
                case "CUPOM TROCA TÉRMICA PADRÃO":
                    return new ReportCupomTrocaTermicaPadrao();
                    break;
                case "COMPROVANTE PAGAMENTO NFCE":
                    return new ReportComprovantePagamentoNfce();
                    break;
                case "CONTA A RECEBER A4 PADRÃO":
                    return new ReportContaReceberA4Padrao();
                    break;
                case "CONTA A RECEBER CLIENTE":
                    return new ReportContasReceberCliente();
                    break;
                case "CONTA A PAGAR A4 PADRÃO":
                    return new ReportContaPagarA4Padrao();
                    break;
                case "CONTRATO A4 PADRÃO":
                    return new ReportContratoA4Padrao();
                    break;
                case "CONTRATO TÉRMICA PADRÃO":
                    return new ReportContratoTermicaPadrao();
                    break;
                case "DEVOLUÇÃO A4 PADRÃO":
                    return new ReportDevolucaoA4Padrao();
                    break;
                case "DEVOLUÇÃO TÉRMICA PADRÃO":
                    return new ReportDevolucaoTermicaPadrao();
                    break;
                case "ETIQUETA 65 PADRÃO":
                    return new ReportEtiqueta65Padrao();
                    break;
                case "ETIQUETA 30 PADRÃO":
                    return new ReportEtiqueta30Padrao();
                    break;
                case "ETIQUETA 33 PADRÃO":
                    return new ReportEtiqueta33Padrao();
                    break;
                case "ETIQUETA IMAGEM":
                    return new ReportEtiquetaImagem();
                    break;
                case "LISTA CLIENTE A4 PADRÃO":
                    return new ReportListaClienteA4Padrao();
                    break;
                case "LISTA PRODUTO A4 PADRÃO":
                    return new ReportListaProdutoA4Padrao();
                    break;
                case "MINUTA DE DESPACHO PADRÃO":
                    return new MinutaDespachoPadrao();
                    break;
                case "MOVIMENTACAO CAIXA A4 DETALHADO PADRÃO":
                    return new ReporMovimentacaoCaixaA4DetalhadoPadrao();
                    break;
                case "MOVIMENTACAO CAIXA A4 DETALHADO COM VENDAS":
                    return new ReporMovimentacaoCaixaA4DetalhadoPadrao();
                    break;
                case "MOVIMENTACAO CAIXA A4 PADRÃO":
                    return new ReportMovimentacaoCaixaA4Padrao();
                    break;
                case "MOVIMENTACAO CAIXA TÉRMICA DETALHADO PADRÃO":
                    return new ReportMovimentacaoCaixaTermicaDetalhadoPadrao();
                    break;
                case "MOVIMENTACAO CAIXA TÉRMICA PADRÃO":
                    return new ReportMovimentacaoCaixaTermicaPadrao();
                    break;
                case "MOVIMENTACÃO EXTRA CAIXA TÉRMICA PADRÃO":
                    return new ReportMovimentacaoExtraCaixaTermicaPadrao();
                    break;
                case "MOVIMENTACÃO EXTRA CAIXA A4 PADRÃO":
                    return new ReportMovimentacaoExtraCaixaA4Padrao();
                    break;
                case "MOVIMENTACAO PONTOS A4 PADRÃO":
                    return new ReportMovimentacaoPontosA4Padrao();
                    break;
                case "ORÇAMENTO A4 PADRÃO":
                    return new ReportOrcamentoA4Padrao();
                    break;
                case "ORÇAMENTO TÉRMICA PADRÃO":
                    return new ReportOrcamentoTermicaPadrao();
                    break;
                case "ORDEM DE COMPRA A4 PADRÃO":
                    return new ReportOrdemCompraA4Padrao();
                    break;
                case "ORDEM DE PRODUÇÃO A4 PADRÃO":
                    return new ReportOrdemProducaoA4Padrao();
                    break;
                case "ORDEM DE PRODUÇÃO DETALHADO A4 PADRÃO":
                    return new ReportOrdemProducaoDetalhadoA4Padrao();
                    break;
                case "ORDEM SERVICO AUTOCENTER A4 PADRÃO":
                    return new ReportOrdemServicoAutocenterA4Padrao();
                    break;
                case "ORDEM SERVICO EQUIPAMENTO A4 PADRÃO":
                    return new ReportOrdemServicoEquipamentoA4Padrao();
                    break;
                case "ORDEM SERVICO EQUIPAMENTO TÉRMICA PADRÃO":
                    return new ReportOrdemServicoEquipamentoTermicaPadrao();
                    break;
                case "ORDEM SERVICO ÓTICA A4 PADRÃO":
                    return new ReportOrdemServicoOticaA4Padrao();
                    break;
                case "ORDEM SERVICO PETSHOP A4 PADRÃO":
                    return new ReportOrdemServicoPetShopA4Padrao();
                    break;
                case "ORDEM SERVICO OUTROS A4 PADRÃO":
                    return new ReportOrdemServicoOutrosA4Padrao();
                    break;
                case "REVISAO VEICULO A4 PADRÃO":
                    return new ReportRevisaoVeiculoA4Padrao();
                    break;
                case "RECIBO CONTA A RECEBER A4 PADRÃO":
                    return new ReportReciboContaReceberA4Padrao();
                    break;
                case "RECIBO CONTA A RECEBER TÉRMICA PADRÃO":
                    //if (tipoImpressao.ToLower().Contains("lote"))
                    //    return new ReportReciboContaReceberTermicaLote();
                    //else
                    return new ReportReciboContaReceberTermicaPadrao();
                    break;
                case "RECIBO CONTA A RECEBER A4 LOTE":
                    return new ReportReciboContaReceberA4Padrao();
                    break;
                case "RECIBO CONTA A RECEBER TÉRMICA LOTE":
                    return new ReportReciboContaReceberTermicaLote();
                    break;
                case "RECIBO CONTA A PAGAR TÉRMICA PADRÃO":
                    return new ReportReciboContaPagarTermicaPadrao();
                    break;
                case "RECIBO CONTA A PAGAR A4 PADRÃO":
                    return new ReportReciboContaPagarA4Padrao();
                    break;
                case "ROMANEIO COMPRA A4 PADRÃO":
                    return new ReportRomaneioCompraA4Padrao();
                    break;
                case "ROMANEIO NFE A4 PADRÃO":
                    return new ReportRomaneioNfeA4Padrao();
                    break;
                case "ROMANEIO PLANO TRANSPORTE A4 PADRÃO":
                    return new ReportRomaneioPlanoTransporteA4Padrao();
                    break;
                case "ROMANEIO PLANO TRANSPORTE ESPÉCIE PAGAMENTO A4":
                    return new ReportRomaneioPlanoTransporteEspeciePagamentoA4();
                    break;
                case "SERVIÇO TERCEIRIZADO A4 PADRÃO":
                    return new ReportServicoTerceirizadoA4Padrao();
                    break;
                case "TRANSFERÊNCIA DE ESTOQUE A4 PADRÃO":
                    return new ReportTransferenciaEstoqueA4Padrao();
                    break;
                case "VENDA A4 PADRÃO":
                    return new ReportVendaA4Padrao();
                    break;
                case "VENDA TÉRMICA PADRÃO":
                    return new ReportVendaTermicaPadrao();
                    break;
                default:
                    break;
            }

            //busca o modelo entre os personalizados (salvos) da organização
            ImpressaoPersonalizada impressao = GetByTipoImpressaoModelo(tokenOrganizacao, tipoImpressao, modeloImpressao).Result;
            if (impressao != null)
            {
                using (StreamWriter sw = new StreamWriter(new MemoryStream()))
                {
                    sw.Write(impressao.XmlImpressao);
                    sw.Flush();
                    report = XtraReport.FromStream(sw.BaseStream, true);
                }
            }

            return report;
        }

        /// <summary>
        /// Cria todos o json a ser introduzido no report a ser exibido.
        /// </summary>
        public JsonDataSource GetJson(AuthenticatedUser _user, string tipoImpressao, string idRegistro, string paramOrigemRegistro, string paramIdEmpresa, string paramIdTabelaPreco, string paramIdLocalizacaoEstoque, string aux)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            var jsonDataSource = new JsonDataSource();
            var json = string.Empty;

            switch (tipoImpressao)
            {
                case "CARNÊ PAGAMENTO":
                    json = GetJsonCarnePagamento(idRegistro, paramOrigemRegistro);
                    break;
                case "COMPROVANTE PAGAMENTO NFCE":
                    json = GetJsonComprovantePagamentoNfce(idRegistro, aux, paramOrigemRegistro);
                    break;
                case "CRÉDITO":
                    json = GetJsonCredito(idRegistro);
                    break;
                case "CUPOM TROCA":
                    json = GetJsonCupomTroca(idRegistro);
                    break;
                case "CONTA A RECEBER":
                    json = GetJsonContaReceber(idRegistro);
                    break;
                case "CONTA A RECEBER CLIENTE":
                    json = GetJsonContaReceberCliente(userNovo, idRegistro, aux);
                    break;
                case "CONTA A PAGAR":
                    json = GetJsonContaPagar(idRegistro);
                    break;
                case "CONTRATO":
                    json = GetJsonContrato(userNovo, idRegistro);
                    break;
                case "DEVOLUÇÃO":
                    json = GetJsonDevolucao(idRegistro);
                    break;
                case "ETIQUETA":
                    json = GetJsonEtiqueta(idRegistro);
                    break;
                case "LISTA CLIENTE":
                    json = GetJsonListaClienteAsync(userNovo, paramIdEmpresa);
                    break;
                case "LISTA PRODUTO":
                    json = GetJsonListaProdutoAsync(userNovo, paramIdEmpresa, paramIdTabelaPreco, paramIdLocalizacaoEstoque);
                    break;
                case "MINUTA DE DESPACHO":
                    json = GetJsonMinutaDespacho(userNovo, idRegistro, aux);
                    break;
                case "MOVIMENTACAO CAIXA":
                    json = GetJsonMovimentacaoCaixa(userNovo, idRegistro, !string.IsNullOrEmpty(aux));
                    break;
                case "MOVIMENTACÃO EXTRA CAIXA":
                    json = GetJsonMovimentacaoExtraCaixa(userNovo, idRegistro);
                    break;
                case "MOVIMENTACAO PONTOS":
                    json = GetJsonMovimentacaoPontos(userNovo, idRegistro);
                    break;
                case "ORÇAMENTO":
                    json = GetJsonOrcamento(idRegistro);
                    break;
                case "ORDEM DE COMPRA":
                    json = GetJsonOrdemCompra(idRegistro);
                    break;
                case "ORDEM DE PRODUÇÃO":
                    json = GetJsonOrdemProducao(idRegistro);
                    break;
                case "ORDEM SERVICO AUTOCENTER":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "ORDEM SERVICO EQUIPAMENTO":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "ORDEM SERVICO ÓTICA":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "ORDEM SERVICO PETSHOP":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "ORDEM SERVICO OUTROS":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "REVISAO VEICULO ORDEM SERVICO":
                    json = GetJsonOrdemServico(idRegistro);
                    break;
                case "RECIBO CONTA A RECEBER":
                    json = GetJsonReciboContaReceber(idRegistro, aux);
                    break;
                case "RECIBO CONTA A RECEBER LOTE":
                    json = GetJsonReciboContaReceberLote(aux);
                    break;
                case "RECIBO CONTA A PAGAR":
                    json = GetJsonReciboContaPagar(idRegistro, aux);
                    break;
                case "ROMANEIO COMPRA":
                    json = GetJsonRomaneioCompra(idRegistro);
                    break;
                case "ROMANEIO NFE":
                    json =  GetJsonRomaneioNfe(idRegistro);
                    break;
                case "PLANO TRANSPORTE":
                    json = GetJsonRomaneioPlanoTransporte(idRegistro);
                    break;
                case "SERVIÇO TERCEIRIZADO":
                    json = GetJsonServicoTerceirizado(idRegistro);
                    break;
                case "TRANSFERENCIA":
                    json = GetJsonTransferenciaEstoque(idRegistro);
                    break;
                case "VENDA":
                    json = GetJsonVenda(userNovo, idRegistro);
                    break;
                default:
                    break;
            }

            if (string.IsNullOrEmpty(json))
                return null;

            jsonDataSource.JsonSource = new CustomJsonSource(json);
            jsonDataSource.Fill();
            return jsonDataSource;
        }

        //usada quando abre edição de algum modelo, para pegar o DataSource do mesmo
        public void SetDataSourceProps(ObjectDataSource ds, string tipoImpressao)
        {
            switch (tipoImpressao)
            {
                case "CONTRATO":
                    ds.DataSource = typeof(JsonPrintContrato);
                    break;
                case "DEVOLUÇÃO":
                    ds.DataSource = typeof(JsonPrintDevolucao);
                    break;
                case "ETIQUETA":
                    ds.DataSource = typeof(JsonPrintEtiqueta);
                    ds.DataMember = "EtiquetaItem";
                    break;
                case "ORÇAMENTO":
                    ds.DataSource = typeof(JsonPrintOrcamento);
                    break;
                case "VENDA":
                    ds.DataSource = typeof(JsonPrintVenda);
                    break;
                case "MINUTA DE DESPACHO":
                    ds.DataSource = typeof(JsonPrintMinutaDespacho);
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// Cria o json de carnê pagamento
        /// </summary>
        private string GetJsonCarnePagamento(string idRegistro, string paramOrigemRegistro)
        {
            Venda venda = null;
            VendaPrint vendaPrint = null;
            Nf nf = null;
            NfPrint nfPrint = null;
            Empresa empresa = null;
            EmpresaPrint empresaPrint = null;
            Terminal terminal = null;
            TerminalPrint terminalPrint = null;
            Cliente cliente = null;
            ClientePrint clientePrint = null;
            List<ContaReceberPrint> listContaReceberPrint = new List<ContaReceberPrint>();
            List<ContaReceber> listContaReceber = new List<ContaReceber>();

            //pega os registros dependendo de quem chamou a impressão (origem)
            switch (paramOrigemRegistro)
            {
                case "NFE":
                    nf = NfRepository.getInstance().GetById(idRegistro, true).Result;  //pega a nfe
                    nfPrint = (NfPrint)nf;
                    empresa = EmpresaRepository.getInstance().GetById(nf.IdEmpresa, true).Result;  //pega empresa da nfe
                    terminal = TerminalRepository.getInstance().GetById(nf.IdTerminal, true).Result;  //pega terminal da nfe
                    cliente = ClienteRepository.getInstance().GetById(nf.IdDestinatario, true).Result;  //pega cliente da nfe
                    VerificaEnderecoCliente(cliente, null, nf);  //verifica se não informou um endereço na nfe, pois se informou é este que deve imprimir
                    listContaReceber = ContaReceberRepository.getInstance().GetByIdVinculo(nf._id, true).Result;  //pega as contas a receber da nfe
                    break;
                case "VENDA":
                    venda = VendaRepository.getInstance().GetById(idRegistro, true).Result;  //pega a venda
                    vendaPrint = (VendaPrint)venda;
                    empresa = EmpresaRepository.getInstance().GetById(venda.IdEmpresa, true).Result;  //pega empresa da venda
                    terminal = TerminalRepository.getInstance().GetById(venda.IdTerminal, true).Result;  //pega terminal da venda
                    cliente = ClienteRepository.getInstance().GetById(venda.IdCliente, true).Result;  //pega cliente da venda
                    VerificaEnderecoCliente(cliente, venda, null);  //verifica se não informou um endereço na venda, pois se informou é este que deve imprimir
                    listContaReceber = ContaReceberRepository.getInstance().GetByIdVinculo(venda._id, true).Result;  //pega as contas a receber da venda
                    break;
                default:
                    break;
            }

            empresaPrint = (EmpresaPrint)empresa;
            terminalPrint = (TerminalPrint)terminal;
            clientePrint = (ClientePrint)cliente;

            if (listContaReceber != null && listContaReceber.Count > 0)
            {
                foreach (ContaReceber contaReceber in listContaReceber.OrderBy(cre => cre.DataVencimento))
                {
                    listContaReceberPrint.Add((ContaReceberPrint)contaReceber);
                }
            }

            JsonPrintCarnePagamento jsonPrintCarnePagamento = new JsonPrintCarnePagamento()
            {
                Venda = vendaPrint,
                Nfe = nfPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                ContaReceber = listContaReceberPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintCarnePagamento);
        }

        /// <summary>
        /// Cria o json de comprovante de pagamento da NFC-e
        /// </summary>
        private string GetJsonComprovantePagamentoNfce(string idRegistro, string indexCobranca, string paramOrigemRegistro)
        {
            if (string.IsNullOrEmpty(paramOrigemRegistro))
                paramOrigemRegistro = "venda";

            int index = int.Parse(indexCobranca);

            ComprovantePagamentoNfcePrint comprovantePagamentoNfcePrint = new ComprovantePagamentoNfcePrint();
            CobrancaPrint cobrancaPrint = new CobrancaPrint();
            string idEmpresa = "";
            string idEspeciePagamento = "";

            //Quando não se sabe se ta vindo da venda ou da conta a receber
            if (paramOrigemRegistro.Equals("nfce"))
            {
                Nfce nfce = NfceRepository.getInstance().GetById(idRegistro, true).Result;
                Vinculo vinculo = null;
                if (nfce.NfceFaturaPagamento)
                {
                    vinculo = nfce.Vinculos.Find(vinc => vinc.Proprietario.Equals("ContaReceber"));
                    if(vinculo != null)
                    {
                        idRegistro = vinculo.IdProprietario;
                        paramOrigemRegistro = "contaReceber";
                    }
                }
                else
                {
                    vinculo = nfce.Vinculos.Find(vinc => vinc.Proprietario.Equals("Venda"));
                    if (vinculo != null)
                    {
                        idRegistro = vinculo.IdProprietario;
                        paramOrigemRegistro = "venda";
                    }
                }
            }

            if (paramOrigemRegistro.Equals("venda"))
            {
                Venda venda = VendaRepository.getInstance().GetById(idRegistro, true).Result;  //pega a venda
                if (venda == null)
                    return "";

                comprovantePagamentoNfcePrint.Documento = venda.CodigoVenda;
                comprovantePagamentoNfcePrint.DataPagamento = venda.DataHoraVenda.ToLocalTime();
                comprovantePagamentoNfcePrint.Usuario = (venda.InFuncionario == null || venda.InFuncionario.InUsuario == null) ? null : venda.InFuncionario.InUsuario.Nome;
                comprovantePagamentoNfcePrint.Terminal = venda.InTerminal == null ? null : venda.InTerminal.Descricao;

                idEmpresa = venda.IdEmpresa;

                Cobrancas cobranca = venda.VendaCobranca[index];
                cobrancaPrint = (CobrancaPrint)cobranca;
                
                MovimentacaoTef movTef =  MovimentacaoTefRepository.getInstance().GetByNSU(cobranca.CodigoAdministrativoTef, false).Result;
                if (movTef != null)
                {
                    comprovantePagamentoNfcePrint.CardBrand = movTef.NomeBandeiraCartao;
                    comprovantePagamentoNfcePrint.TerminalSerialNumber = movTef.CodigoAdministrativo;
                    comprovantePagamentoNfcePrint.Holder = "**** **** **** " + movTef.NumeroCartaoCliente;
                }
               

                idEspeciePagamento = cobranca.IdEspeciePagamento;
            }
            if (paramOrigemRegistro.Equals("contaReceber"))
            {
                //Quando contaReceber, os ids são enviados como parametros no campo idRegistro
                string[] listParamContaReceber = Functions.GetListFromQueryParameter(idRegistro, "contaReceber");

                ContaReceber contaReceber = ContaReceberRepository.getInstance().GetById(listParamContaReceber.Length <= 0 ? idRegistro : listParamContaReceber[0], true).Result;  //pega a contaReceber
                if (contaReceber == null)
                    return "";

                index = listParamContaReceber.Length > 1 ? contaReceber.Pagamentos.Count - 1 : index;
                PagamentoContaReceber pagamento = contaReceber.Pagamentos[index];
                if (pagamento == null)
                    return "";
                MovimentacaoTef movTef = MovimentacaoTefRepository.getInstance().GetByNSU(pagamento.CodigoAdministrativoTef, false).Result;
                if (movTef != null)
                {
                    comprovantePagamentoNfcePrint.CardBrand = movTef.NomeBandeiraCartao;
                    comprovantePagamentoNfcePrint.TerminalSerialNumber = movTef.CodigoAdministrativo;
                    comprovantePagamentoNfcePrint.Holder = "**** **** **** " + movTef.NumeroCartaoCliente;
                }

                comprovantePagamentoNfcePrint.Documento = contaReceber.Documento;
                comprovantePagamentoNfcePrint.DataPagamento = pagamento.DataHoraPagamento.ToLocalTime();
                comprovantePagamentoNfcePrint.Usuario = pagamento.InUsuario == null ? null : pagamento.InUsuario.Nome;
                comprovantePagamentoNfcePrint.Terminal = pagamento.InTerminal == null ? null : pagamento.InTerminal.Descricao;

                idEmpresa = contaReceber.IdEmpresa;
                idEspeciePagamento = pagamento.IdEspeciePagamento;

                cobrancaPrint.NumeroAutorizacao = pagamento.ControleTef;
                cobrancaPrint.Valor = pagamento.ValorPago;

                if(listParamContaReceber.Length > 1)
                {
                    string parametros = idRegistro.Replace("contaReceber", "id");
                    List<ContaReceber> listContasReceber = ContaReceberRepository.getInstance().GetByIds(parametros, contaReceber.TokenOrganizacao).Result;
                    foreach(ContaReceber cre in listContasReceber)
                    {
                        if(cre._id != listParamContaReceber[0]) //Porque o primeiro ja consta no campo valor da cobrancaPrint
                        {
                            PagamentoContaReceber pagamentoAux = cre.Pagamentos[cre.Pagamentos.Count - 1];
                            cobrancaPrint.Valor += pagamentoAux.ValorPago;
                        }
                    }
                }
            }


            if (string.IsNullOrEmpty(cobrancaPrint.NumeroAutorizacao))
                return "";

            Empresa empresa = EmpresaRepository.getInstance().GetById(idEmpresa, true).Result;  //pega empresa da venda
            empresa.Cnpj = Functions.FormatCpfCnpj(empresa.Cnpj);
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            EspeciePagamento especiePagamento = EspeciePagamentoRepository.getInstance().GetById(idEspeciePagamento, true).Result;
            EspeciePagamentoPrint especiePagamentoPrint = (EspeciePagamentoPrint)especiePagamento;

            if (string.IsNullOrEmpty(cobrancaPrint.NumeroAutorizacao))
                return "";

            JsonPrintComprovantePagamentoNfce jsonPrintCredito = new JsonPrintComprovantePagamentoNfce()
            {
                ComprovantePagamento = comprovantePagamentoNfcePrint,
                Empresa = empresaPrint,
                Cobranca = cobrancaPrint,
                EspeciePagamento = especiePagamentoPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintCredito);
        }

        /// <summary>
        /// Cria o json de crédito
        /// </summary>
        private string GetJsonCredito(string idRegistro)
        {
            Credito credito = CreditoRepository.getInstance().GetById(idRegistro, true).Result;  //pega a crédito
            CreditoPrint creditoPrint = (CreditoPrint)credito;

            Empresa empresa = EmpresaRepository.getInstance().GetById(credito.IdEmpresa, true).Result;  //pega empresa do crédito
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            Cliente cliente = ClienteRepository.getInstance().GetById(credito.IdCliente, true).Result;  //pega cliente do crédito
            ClientePrint clientePrint = (ClientePrint)cliente;

            JsonPrintCredito jsonPrintCredito = new JsonPrintCredito()
            {
                Credito = creditoPrint,
                Empresa = empresaPrint,
                Cliente = clientePrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintCredito);
        }

        /// <summary>
        /// Cria o json de cupom troca
        /// </summary>
        private string GetJsonCupomTroca(string idRegistro)
        {
            Venda venda = VendaRepository.getInstance().GetById(idRegistro, true).Result;  //pega a venda
            VendaPrint vendaPrint = (VendaPrint)venda;

            Empresa empresa = EmpresaRepository.getInstance().GetById(venda.IdEmpresa, true).Result;  //pega empresa da venda
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            JsonPrintCupomTroca jsonPrintCupomTroca = new JsonPrintCupomTroca()
            {
                Venda = vendaPrint,
                Empresa = empresaPrint,
                DataImpressao = DateTime.Now
            };

            return new JavaScriptSerializer().Serialize(jsonPrintCupomTroca);
        }

        /// <summary>
        /// Cria o json de devolução
        /// </summary>
        private string GetJsonDevolucao(string idRegistro)
        {
            Devolucao devolucao = DevolucaoRepository.getInstance().GetById(idRegistro, true).Result;  //pega a devolução
            DevolucaoPrint devolucaoPrint = (DevolucaoPrint)devolucao;

            Empresa empresa = EmpresaRepository.getInstance().GetById(devolucao.IdEmpresa, true).Result;  //pega empresa da devolução
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Cliente cliente = ClienteRepository.getInstance().GetById(devolucao.IdCliente, true).Result;  //pega cliente da devolução
            ClientePrint clientePrint = (ClientePrint)cliente;

            List<DevolucaoItemPrint> listDevolucaoItemPrint = new List<DevolucaoItemPrint>();  //pega os itens da devolução
            if (devolucao.Itens != null && devolucao.Itens.Count > 0)
            {
                foreach (DevolucaoItem devolucaoItem in devolucao.Itens)
                {
                    listDevolucaoItemPrint.Add((DevolucaoItemPrint)devolucaoItem);
                }
            }

            JsonPrintDevolucao jsonPrintDevolucao = new JsonPrintDevolucao()
            {
                Devolucao = devolucaoPrint,
                Empresa = empresaPrint,
                Cliente = clientePrint,
                DevolucaoItem = listDevolucaoItemPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintDevolucao);
        }

        /// <summary>
        /// Cria o json de etiqueta
        /// </summary>
        private string GetJsonEtiqueta(string idRegistro)
        {
            Etiqueta etiqueta = EtiquetaRepository.getInstance().GetById(idRegistro, true).Result;  //pega as definições de etiqueta do user logado
            Produto produto = null;
            List<EtiquetaItemPrint> listEtiquetaItemPrint = new List<EtiquetaItemPrint>();

            // recurso para deixar em branco x etiquetas no começo (iniciar a imprimir em:)
            if (etiqueta.IniciarNaEtiqueta > 1)
            {
                for (int i = 1; i < etiqueta.IniciarNaEtiqueta; i++)
                {
                    listEtiquetaItemPrint.Add(new EtiquetaItemPrint() { NaoImprimir = true });
                }
            }

            foreach (EtiquetaItem item in etiqueta.Itens)
            {
                produto = ProdutoRepository.getInstance().GetById(item.IdProduto, true).Result;  //pega o produto
                ProdutoImagem produtoImagem = ProdutoImagemRepository.getInstance().GetPrincipalByIdProduto(produto._id).Result;

                for (int i = 0; i < item.Quantidade; i++)
                {
                    //pega identificadores para barra e texto
                    var _identificadorBarras = string.Empty;
                    switch (etiqueta.IdentificadorBarras)
                    {
                        case "CÓDIGO":
                            _identificadorBarras = produto.Codigo;
                            break;
                        case "CÓDIGO DE BARRAS":
                            _identificadorBarras = item.CodigoBarras != null ? item.CodigoBarras.Codigo : string.Empty;
                            break;
                        case "REFERÊNCIA":
                            _identificadorBarras = item.Referencia != null ? item.Referencia.Ref : string.Empty;
                            break;
                        case "COD FORNECEDOR":
                            var refFornecedor = produto.Referencias != null && produto.Referencias.Find(x => x.Descricao == "COD FORNECEDOR" && x.IdFornecedor == produto.IdFornecedorAtual) != null
                                    ? produto.Referencias.FindLast(x => x.Descricao == "COD FORNECEDOR" && x.IdFornecedor == produto.IdFornecedorAtual).Ref : string.Empty;

                            _identificadorBarras = !string.IsNullOrEmpty(refFornecedor) ? refFornecedor 
                                : produto.Referencias != null && produto.Referencias.Find(x => x.Descricao == "COD FORNECEDOR") != null
                                ? produto.Referencias.FindLast(x => x.Descricao == "COD FORNECEDOR").Ref : string.Empty;
                            break;
                        default:
                            break;
                    }
                    var _identificadorTexto = string.Empty;
                    switch (etiqueta.IdentificadorTexto)
                    {
                        case "CÓDIGO":
                            _identificadorTexto = produto.Codigo;
                            break;
                        case "CÓDIGO DE BARRAS":
                            _identificadorTexto = item.CodigoBarras != null ? item.CodigoBarras.Codigo : string.Empty;
                            break;
                        case "REFERÊNCIA":
                            _identificadorTexto = item.Referencia != null ? item.Referencia.Ref : string.Empty;
                            break;
                        case "COD FORNECEDOR":
                            var refFornecedor = produto.Referencias != null && produto.Referencias.Find(x => x.Descricao == "COD FORNECEDOR" && x.IdFornecedor == produto.IdFornecedorAtual) != null
                                    ? produto.Referencias.FindLast(x => x.Descricao == "COD FORNECEDOR" && x.IdFornecedor == produto.IdFornecedorAtual).Ref : string.Empty;

                            _identificadorTexto = !string.IsNullOrEmpty(refFornecedor) ? refFornecedor
                                : produto.Referencias != null && produto.Referencias.Find(x => x.Descricao == "COD FORNECEDOR") != null
                                ? produto.Referencias.FindLast(x => x.Descricao == "COD FORNECEDOR").Ref : string.Empty;
                            break;
                        default:
                            break;
                    }

                    listEtiquetaItemPrint.Add(new EtiquetaItemPrint()
                    {
                        Descricao = item.Descricao,
                        IdentificadorBarras = _identificadorBarras,
                        TituloIdentificadorTexto = string.IsNullOrEmpty(_identificadorTexto) ? string.Empty : $"{etiqueta.IdentificadorTexto.Substring(0, 1).ToUpper()}{etiqueta.IdentificadorTexto.Substring(1).ToLower()}: ",
                        IdentificadorTexto = _identificadorTexto,
                        Grupo = produto.InGrupoProduto.Descricao,
                        Subgrupo = produto.InSubgrupoProduto.Descricao,
                        Marca = produto.InMarca.Descricao,
                        TituloPrecoA = item.ValorUnitarioA > 0 ? etiqueta.TituloPrecoA : string.Empty,
                        ValorUnitarioA = item.ValorUnitarioA > 0 ? (etiqueta.DividirParcelasA <= 1 ? item.ValorUnitarioA.ToString("C2") : $"{etiqueta.DividirParcelasA} X {(item.ValorUnitarioA / etiqueta.DividirParcelasA).ToString("C2")}") : string.Empty,
                        TituloPrecoB = item.ValorUnitarioB > 0 ? etiqueta.TituloPrecoB : string.Empty,
                        ValorUnitarioB = item.ValorUnitarioB > 0 ? (etiqueta.DividirParcelasB <= 1 ? item.ValorUnitarioB.ToString("C2") : $"{etiqueta.DividirParcelasB} X {(item.ValorUnitarioB / etiqueta.DividirParcelasB).ToString("C2")}") : string.Empty,
                        UnidadeMedida = string.IsNullOrEmpty(item.InUnidadeMedida?.Descricao) ? "UN" : item.InUnidadeMedida?.Descricao,
                        QuantidadeAtacado = produto.VendaValorAtacado.ToString(),
                        CodigoInterno = produto.Codigo,
                        ImagemProduto = produtoImagem == null ? null : produtoImagem.CodeBase64,
                        Tamanho = produto.Dimensao != null ? produto.Dimensao.Tamanho : "",
                        DescricaoAdicional = !string.IsNullOrEmpty(item.DescricaoAdicional) ? item.DescricaoAdicional : !string.IsNullOrEmpty(produto.DescricaoAdicional) ? produto.DescricaoAdicional : "",
                        DadosAdicionais = !string.IsNullOrEmpty(item.DadosAdicionais) ? item.DadosAdicionais : ""
                    });
                }
            }

            JsonPrintEtiqueta jsonPrintEtiqueta = new JsonPrintEtiqueta()
            {
                EtiquetaItem = listEtiquetaItemPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintEtiqueta);
        }

        /// <summary>
        /// Cria o json de minuta despacho
        /// </summary>
        private string GetJsonMinutaDespacho(AuthenticatedUser _user, string idRegistro, string aux)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);

            var listIds = Functions.GetListFromQueryParameter(aux, "id");
            var listMinutaDespacho = new List<MinutaDespachoPrint>();
            var empresaPrint = new EmpresaPrint();
            var clientePrint = new ClientePrint();
            var transportadoraPrint = new FornecedorPrint();
            var veiculoPrint = new VeiculoPrint();
            var listNfe = new List<Nf>();

            if (listIds == null || listIds.Length == 0)
            {
                Nf nfe = NfRepository.getInstance().GetById(idRegistro, true).Result;
                if (nfe != null) listNfe.Add(nfe);
            }
            else
            {
                foreach (var id in listIds)
                {
                    var nfe = NfRepository.getInstance().GetById(id, true).Result;
                    if (nfe != null) listNfe.Add(nfe);
                }
            }

            if (listNfe.Count > 0)
            {
                foreach (var nf in listNfe)
                {
                    Cliente cliente = new Cliente();
                    Fornecedor fornecedor = new Fornecedor();

                    var empresa = EmpresaRepository.getInstance().GetById(nf.IdEmpresa, true).Result;
                    var transportadora = FornecedorRepository.getInstance().GetById(nf.IdTransportadora, true).Result;
                    var veiculo = VeiculoRepository.getInstance().GetById(nf.IdVeiculo, true).Result;

                    if (nf.TipoDestinatario.ToUpper().Equals("FORNECEDOR"))
                    {
                        fornecedor = FornecedorRepository.getInstance().GetById(nf.IdDestinatario, true).Result;
                        clientePrint = new ClientePrint()
                        {
                            NomeRazaoSocial = fornecedor.NomeRazaoSocial,
                            ApelidoNomeFantasia = fornecedor.ApelidoNomeFantasia,
                            CpfCnpj = fornecedor.CpfCnpj,
                            RgIe = fornecedor.RgIe,
                            Codigo = fornecedor.Codigo,
                            PontosFidelidade = 0.0,
                            Endereco = fornecedor.getEnderecoPrincipal(),
                            Telefone = fornecedor.getTelefonePrincipal(),
                            Email = fornecedor.getEmailPrincipal(),
                            CpfOrCnpj = fornecedor.TipoPessoa == "JURÍDICA" ? "CNPJ" : "CPF",
                            SaldoDevedor = 0
                        };
                    }
                    else
                    {
                        cliente = ClienteRepository.getInstance().GetById(nf.IdDestinatario, true).Result;
                        clientePrint = (ClientePrint)cliente;
                    }

                    empresaPrint = (EmpresaPrint)empresa;
                    transportadoraPrint = (FornecedorPrint)transportadora;
                    veiculoPrint = (VeiculoPrint)veiculoPrint;

                    for (int i = 1; i <= nf.QuantidadeVolume; i++)
                    {
                        MinutaDespachoPrint minutaDespacho = (MinutaDespachoPrint)nf;
                        minutaDespacho.Empresa = empresaPrint;
                        minutaDespacho.Cliente = clientePrint;
                        minutaDespacho.Transportadora = transportadoraPrint;
                        minutaDespacho.Veiculo = veiculoPrint;
                        minutaDespacho.NumVolumeMinuta = i;
                        listMinutaDespacho.Add(minutaDespacho);
                    }
                }
            }

            JsonPrintMinutaDespacho jsonPrintMinutaDespacho = new JsonPrintMinutaDespacho()
            {
                ListMinutaDespacho = listMinutaDespacho,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintMinutaDespacho);
        }

        /// <summary>
        /// Cria o json de movimentacao de caixa detalhado
        /// </summary>
        private string GetJsonMovimentacaoCaixa(AuthenticatedUser _user, string idRegistro, bool considerarListaVendas)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            MovimentacaoCaixa movimentacaoCaixa = MovimentacaoCaixaRepository.getInstance().GetById(idRegistro, true).Result;  //pega a movimentacaoCaixa
            MovimentacaoCaixaPrint movimentacaoCaixaPrint = (MovimentacaoCaixaPrint)movimentacaoCaixa;
            List<MovimentacaoCaixaItem> listMovimentacaoCaixaItem = MovimentacaoCaixaItemRepository.getInstance().GetByIdMovimentacaoCaixa(movimentacaoCaixa._id).Result;

            // AGRUPA AS MOVIMENTAÇÕES POR ESPECÍE DE PAGAMENTO E TIPO DE LANÇAMENTO
            List<MovimentacaoCaixaEspeciePrint> listPorTipoLancamento = new List<MovimentacaoCaixaEspeciePrint>();
            List<string> tiposLancamento = new List<string> { "01", "02", "03", "04", "05", "10", "11", "12", "13", "15", "16", "17", "18", "19", "99" };
            List<string> listEspeciePagamento = listMovimentacaoCaixaItem.Select(x => x.InEspecie.Descricao).Distinct().ToList();
            List<ValorFechamentoPrint> listValorFechamento = new List<ValorFechamentoPrint>();
            List<VendaCobrancaEspeciePrint> listVendaCobrancaEspeciePrint = new List<VendaCobrancaEspeciePrint>();
            double valorTotalVendas = 0;
            /*
            List<string> listTiposLancamentoIgnorar = new List<string>();
            Configuracao configuracaoTipoLancamento = ConfiguracaoRepository.getInstance().GetConfig(userNovo.TokenOrganizacao, 39).Result;
            if(configuracaoTipoLancamento != null && configuracaoTipoLancamento.Ativo && !string.IsNullOrEmpty(configuracaoTipoLancamento.Parametros))
            {
                listTiposLancamentoIgnorar = configuracaoTipoLancamento.Parametros.Split("|").ToList();
                listTiposLancamentoIgnorar.ForEach(item => { tiposlancamento.Remove(item); });
            }
            */

            if (considerarListaVendas)
            {
                //Busca o terminal do caixa
                Terminal terminalCaixa = TerminalRepository.getInstance().GetByIdCaixa(movimentacaoCaixa.IdCaixa, true).Result;
                //Busca todas as vendas correspondente ao período do caixa
                string filtro = $"ilimitado=true&empresa={terminalCaixa.IdEmpresa}&terminal={terminalCaixa._id}&dataVendaInicial={movimentacaoCaixa.DataHoraAbertura}&dataVendaFinal={movimentacaoCaixa.DataHoraFechamento}";
                List<Venda> listVendas = VendaRepository.getInstance().Find(userNovo, filtro).Result;


                CondicaoPagamento condicaoPagamentoAux = new CondicaoPagamento();

                foreach (Venda venda in listVendas)
                {
                    if (venda.DataHoraVenda >= movimentacaoCaixa.DataHoraAbertura && venda.DataHoraVenda <= movimentacaoCaixa.DataHoraFechamento)
                    {
                        if (venda.VendaCobranca.Count > 0)
                        {
                            Nf nfeVenda = null;
                            if (venda.Vinculos != null)
                            {
                                int indexNfe = venda.Vinculos.FindIndex(v => v.Proprietario == "NFe");
                                if (indexNfe != -1)
                                    nfeVenda = NfRepository.getInstance().GetById(venda.Vinculos[indexNfe].IdProprietario, true).Result;
                            }

                            List<ContaReceber> listContaReceberVenda = new List<ContaReceber>();
                            if (venda.FinanceiroGerado)
                            {
                                listContaReceberVenda.OrderBy(x => x.Documento);
                                listContaReceberVenda = ContaReceberRepository.getInstance().GetByIdVinculo(venda._id, true).Result;
                            }

                            foreach (Cobrancas cobranca in venda.VendaCobranca)
                            {
                                if (condicaoPagamentoAux._id != cobranca.IdCondicaoPagamento && !string.IsNullOrEmpty(cobranca.IdCondicaoPagamento))
                                    condicaoPagamentoAux = CondicaoPagamentoRepository.getInstance().GetById(cobranca.IdCondicaoPagamento, true).Result;

                                VendaCobrancaPrint vendaCobrancaPrint = new VendaCobrancaPrint();
                                vendaCobrancaPrint.CodigoVenda = venda.CodigoVenda;
                                vendaCobrancaPrint.SequencialVenda = venda.Sequencial.ToString();
                                vendaCobrancaPrint.NomeCliente = venda.InCliente?.NomeRazaoSocial;
                                vendaCobrancaPrint.EspeciePagamento = cobranca.InEspeciePagamento?.Descricao;
                                vendaCobrancaPrint.CondicaoPagamento = cobranca.InCondicaoPagamento?.Descricao;
                                vendaCobrancaPrint.Valor = cobranca.Valor;
                                vendaCobrancaPrint.SequencialNfe = nfeVenda == null ? "0" : nfeVenda.Sequencial.ToString();

                                if (listContaReceberVenda.Count > 0)
                                {
                                    List<ContaReceber> listCreAuxiliar = new List<ContaReceber>();
                                    listCreAuxiliar = listContaReceberVenda.GetRange(0, condicaoPagamentoAux.NumeroParcelas);

                                    int indexCobranca = condicaoPagamentoAux.NumeroParcelas - 1;
                                    if (indexCobranca < listCreAuxiliar.Count && indexCobranca >= 0)
                                    {
                                        vendaCobrancaPrint.DataVencimento = listCreAuxiliar[indexCobranca].DataVencimento.ToString("dd/MM/yyyy");
                                        listContaReceberVenda.RemoveRange(0, condicaoPagamentoAux.NumeroParcelas);
                                    }
                                }
                                else
                                    vendaCobrancaPrint.DataVencimento = "-";

                                int index = listVendaCobrancaEspeciePrint.FindIndex(v => v.EspeciePagamento.Equals(vendaCobrancaPrint.EspeciePagamento));
                                if (index == -1)
                                {
                                    VendaCobrancaEspeciePrint vendaCobrancaEspeciePrintAux = new VendaCobrancaEspeciePrint();
                                    vendaCobrancaEspeciePrintAux.EspeciePagamento = vendaCobrancaPrint.EspeciePagamento;
                                    vendaCobrancaEspeciePrintAux.ValorTotal = vendaCobrancaPrint.Valor;
                                    vendaCobrancaEspeciePrintAux.Itens.Add(vendaCobrancaPrint);
                                    listVendaCobrancaEspeciePrint.Add(vendaCobrancaEspeciePrintAux);
                                }
                                else
                                {
                                    listVendaCobrancaEspeciePrint[index].ValorTotal += cobranca.Valor;
                                    listVendaCobrancaEspeciePrint[index].Itens.Add(vendaCobrancaPrint);
                                }

                                valorTotalVendas += cobranca.Valor;
                            }
                        }
                    }
                }
            }

            if (listMovimentacaoCaixaItem.Count > 0)
            {
                foreach (var especiePagamento in listEspeciePagamento)
                {
                    List<MovimentacaoCaixaItem> listTempMovCaixaPorEspecie = listMovimentacaoCaixaItem.FindAll(mov => mov.InEspecie.Descricao.Equals(especiePagamento));

                    if (listTempMovCaixaPorEspecie.Count > 0)
                    {
                        ValorFechamentoPrint valorFechamento = new ValorFechamentoPrint() { TipoLancamento = listTempMovCaixaPorEspecie[0].TipoLancamento };
                        MovimentacaoCaixaEspeciePrint lancamento = new MovimentacaoCaixaEspeciePrint();
                        foreach (MovimentacaoCaixaItem mov in listTempMovCaixaPorEspecie)
                        {
                            if (mov.Tipo.Equals("ENTRADA"))
                                valorFechamento.ValorEntradas += mov.Valor;
                            else
                                valorFechamento.ValorSaidas += mov.Valor;

                            // Adiciona observações na descrição se for movimentação extra
                            //if (mov.Descricao.Contains("MOV. EXTRA") && !string.IsNullOrEmpty(mov.Observacao))
                            if (!string.IsNullOrEmpty(mov.Observacao))
                                mov.Descricao = mov.Descricao + " - OBS: " + mov.Observacao.ToUpper();

                            mov.DataHora = mov.DataHora.ToLocalTime();
                            lancamento.Itens.Add(mov);
                        }

                        lancamento.TipoLancamento = especiePagamento;
                        listPorTipoLancamento.Add((MovimentacaoCaixaEspeciePrint)lancamento);
                    }
                }

                foreach (var tipoLancamento in tiposLancamento)
                {
                    List<MovimentacaoCaixaItem> listTempMovCaixaPorEspecie = listMovimentacaoCaixaItem.FindAll(mov => mov.TipoLancamento.Equals(tipoLancamento));

                    if (listTempMovCaixaPorEspecie.Count > 0)
                    {
                        ValorFechamentoPrint valorFechamento = new ValorFechamentoPrint() { TipoLancamento = listTempMovCaixaPorEspecie[0].TipoLancamento };
                        foreach (MovimentacaoCaixaItem mov in listTempMovCaixaPorEspecie)
                        {
                            if (mov.Tipo.Equals("ENTRADA"))
                                valorFechamento.ValorEntradas += mov.Valor;
                            else
                                valorFechamento.ValorSaidas += mov.Valor;
                        }
                        listValorFechamento.Add(valorFechamento);
                    }
                }
            }

            // PEGA OS VALORES TOTAIS E APURADOS DO FECHAMENTO
            List<ValorFechamentoPrint> listValorFechamentoPrint = new List<ValorFechamentoPrint>();
            if (movimentacaoCaixa.ValoresFechamento != null && movimentacaoCaixa.ValoresFechamento.Count > 0)
            {
                foreach (ValorFechamento valorFechamento in movimentacaoCaixa.ValoresFechamento)
                {
                    //if(!listTiposLancamentoIgnorar.Exists(item => item.Equals(valorFechamento.TipoLancamento)))
                    if (valorFechamento.Valor != 0 || valorFechamento.ValorApurado != 0)
                    {
                        ValorFechamentoPrint valorFechamentoAux = listValorFechamento.Find(x => x.TipoLancamento.Equals(valorFechamento.TipoLancamento));

                        movimentacaoCaixaPrint.ValorTotal += valorFechamento.Valor;
                        movimentacaoCaixaPrint.ValorTotalApurado += valorFechamento.ValorApurado;

                        ValorFechamentoPrint valorFechamentoPrint = (ValorFechamentoPrint)valorFechamento;
                        valorFechamentoPrint.ValorEntradas = valorFechamentoAux == null ? 0 : valorFechamentoAux.ValorEntradas;
                        valorFechamentoPrint.ValorSaidas = valorFechamentoAux == null ? 0 : valorFechamentoAux.ValorSaidas;

                        movimentacaoCaixaPrint.ValorTotalEntradas += valorFechamentoPrint.ValorEntradas;
                        movimentacaoCaixaPrint.ValorTotalSaidas += valorFechamentoPrint.ValorSaidas;

                        listValorFechamentoPrint.Add(valorFechamentoPrint);
                    }
                }
            }

            JsonPrintMovimentacaoCaixaDetalhado jsonPrintMovimentacaoCaixa = new JsonPrintMovimentacaoCaixaDetalhado()
            {
                MovimentacaoCaixa = movimentacaoCaixaPrint,
                MovAgrupadosPorTipoLancamento = listPorTipoLancamento,
                ValorFechamento = listValorFechamentoPrint,
                VendaCobrancaAgrupadaEspeciePrint = listVendaCobrancaEspeciePrint,
                ValorTotalVendas = valorTotalVendas,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintMovimentacaoCaixa);
        }

        /// <summary>
        /// Cria o json de movimentacao extra do caixa (Suprimento/Sangria)
        /// </summary>
        private string GetJsonMovimentacaoExtraCaixa(AuthenticatedUser _user, string idRegistro)
        {
            MovimentacaoCaixa movCaixa = null;
            Terminal terminal = null;
            Empresa empresa = null;

            MovimentacaoCaixaItem movCaixaItem = MovimentacaoCaixaItemRepository.getInstance().GetById(idRegistro, false).Result;

            if (movCaixaItem != null)
            {
                movCaixa = MovimentacaoCaixaRepository.getInstance().GetById(movCaixaItem.IdMovimentacaoCaixa, false).Result;
                terminal = TerminalRepository.getInstance().GetById(movCaixaItem.IdTerminal, false).Result;

                movCaixaItem.DataHora = movCaixaItem.DataHora.ToLocalTime();
                movCaixaItem.Valor = movCaixaItem.Tipo.Equals("SAÍDA") ? -movCaixaItem.Valor : movCaixaItem.Valor;
            }
            if (terminal != null)
                empresa = EmpresaRepository.getInstance().GetById(terminal.IdEmpresa, false).Result;

            MovimentacaoCaixaPrint movimentacaoCaixaPrint = (MovimentacaoCaixaPrint)movCaixa;
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            JsonPrintMovimentacaoExtraCaixa jsonPrintMovimentacaoExtraCaixa = new JsonPrintMovimentacaoExtraCaixa()
            {
                Empresa = empresaPrint,
                MovimentacaoCaixa = movimentacaoCaixaPrint,
                MovimentacaoCaixaItem = movCaixaItem,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintMovimentacaoExtraCaixa);
        }

        /// <summary>
        /// Cria o json de contrato
        /// </summary>
        private string GetJsonContrato(AuthenticatedUser _userNovo, string idRegistro)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_userNovo);
            Contrato contrato = ContratoRepository.getInstance().GetById(idRegistro, true).Result;  //pega o contrato
            ContratoPrint contratoPrint = (ContratoPrint)contrato;

            Empresa empresa = EmpresaRepository.getInstance().GetById(contrato.IdEmpresa, true).Result;  //pega empresa do contrato
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Cliente cliente = ClienteRepository.getInstance().GetById(contrato.IdCliente, true).Result;  //pega cliente do contrato
            ClientePrint clientePrint = (ClientePrint)cliente;

            List<ContratoItemPrint> listContratoItemPrint = new List<ContratoItemPrint>();  //pega os itens do contrato
            if (contrato.Itens != null && contrato.Itens.Count > 0)
            {
                foreach (ContratoItem contratoItem in contrato.Itens)
                {
                    listContratoItemPrint.Add((ContratoItemPrint)contratoItem);
                }
            }

            List<CobrancaPrint> listCobrancaPrint = new List<CobrancaPrint>();  //pega os contartos-cobranças do contrato
            if (contrato.ContratoCobranca != null && contrato.ContratoCobranca.Count > 0)
            {
                foreach (Cobrancas contratoCobranca in contrato.ContratoCobranca)
                {
                    listCobrancaPrint.Add((CobrancaPrint)contratoCobranca);
                }
            }

            List<ContaReceberPrint> listContaReceberPrint = new List<ContaReceberPrint>(); //pega as contas a receber do orçamento (simulações)
            if (contrato.ContratoContaReceber != null && contrato.ContratoContaReceber.Count > 0)
            {
                foreach (ContaReceber contratoContaReceber in contrato.ContratoContaReceber.OrderBy(cre => cre.DataVencimento))
                {
                    listContaReceberPrint.Add((ContaReceberPrint)contratoContaReceber);
                }
            }

            JsonPrintContrato jsonPrintContrato = new JsonPrintContrato()
            {
                Contrato = contratoPrint,
                Empresa = empresaPrint,
                Cliente = clientePrint,
                ContratoItem = listContratoItemPrint,
                Cobranca = listCobrancaPrint,
                ContaReceber = listContaReceberPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintContrato);
        }

        /// <summary>
        /// Cria o json de MOVIMENTACAO DE PONTOS FIDELIDADE de uma empresa
        /// </summary>
        private string GetJsonMovimentacaoPontos(AuthenticatedUser _user, string idRegistro)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            List<FilterDefinition<MovimentacaoPontos>> listFilterAux = new List<FilterDefinition<MovimentacaoPontos>>();
            var builder = Builders<MovimentacaoPontos>.Filter;
            var filterFinalMovPontos = builder.Eq(f => f.IdCliente, idRegistro);

            Cliente cliente = ClienteRepository.getInstance().GetById(idRegistro, true).Result;
            ClientePrint clientePrint = (ClientePrint)cliente;

            Empresa empresa = EmpresaRepository.getInstance().GetById(cliente.IdEmpresaCadastro, true).Result;
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            List<MovimentacaoPontosPrint> listMovimentacaoPontosPrint = new List<MovimentacaoPontosPrint>();
            IFindFluent<MovimentacaoPontos, MovimentacaoPontos> result = _context.MovimentacaoPontos.Find(filterFinalMovPontos);
            List<MovimentacaoPontos> listMovimentacaoPontos = result.ToList();

            if (listMovimentacaoPontos.Count > 0)
            {
                foreach (MovimentacaoPontos item in listMovimentacaoPontos)
                    listMovimentacaoPontosPrint.Add((MovimentacaoPontosPrint)item);
            }

            JsonPrintMovimentacaoPontos jsonPrintMovimentacaoPontos = new JsonPrintMovimentacaoPontos()
            {
                Empresa = empresaPrint,
                Cliente = clientePrint,
                ListMovimentacaoPontos = listMovimentacaoPontosPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintMovimentacaoPontos);
        }

        /// <summary>
        /// Cria o json de orçamento
        /// </summary>
        private string GetJsonOrcamento(string idRegistro)
        {
            Orcamento orcamento = OrcamentoRepository.getInstance().GetById(idRegistro, true).Result;  //pega o orcamento
            OrcamentoPrint orcamentoPrint = (OrcamentoPrint)orcamento;

            Empresa empresa = EmpresaRepository.getInstance().GetById(orcamento.IdEmpresa, true).Result;  //pega empresa do orcamento
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            Funcionario funcionario = FuncionarioRepository.getInstance().GetById(orcamento.IdFuncionario, false).Result;
            FuncionarioPrint funcionarioPrint = (FuncionarioPrint)funcionario;

            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Cliente cliente = ClienteRepository.getInstance().GetById(orcamento.IdCliente, true).Result;  //pega cliente do orcamento
            ClientePrint clientePrint = (ClientePrint)cliente;

            TipoFrete tipoFrete = TipoFreteRepository.getInstance().GetById(orcamento.IdTipoFrete, true).Result;  //pega tipo de frete do orcamento
            if (tipoFrete != null)
            {
                orcamentoPrint.TipoFrete = tipoFrete.Descricao;
                switch (tipoFrete.ModalidadeFrete)
                {
                    case 0: orcamentoPrint.ModalidadeTipoFrete = "Por conta do emitente/remetente"; break;
                    case 1: orcamentoPrint.ModalidadeTipoFrete = "Por conta do destinatário"; break;
                    case 2: orcamentoPrint.ModalidadeTipoFrete = "Por conta de terceiros"; break;
                    case 3: orcamentoPrint.ModalidadeTipoFrete = "Próprio - por conta de emitente/remetente"; break;
                    case 4: orcamentoPrint.ModalidadeTipoFrete = "Próprio - por conta de destinatário"; break;
                    default: orcamentoPrint.ModalidadeTipoFrete = "Sem frete"; break;
                }
            }

            List<OrcamentoItemPrint> listOrcamentoItemPrint = new List<OrcamentoItemPrint>();  //pega os itens do orcamento
            if (orcamento.Itens != null && orcamento.Itens.Count > 0)
            {
                foreach (OrcamentoItem orcamentoItem in orcamento.Itens)
                {
                    listOrcamentoItemPrint.Add((OrcamentoItemPrint)orcamentoItem);
                }
            }

            List<CobrancaPrint> listCobrancaPrint = new List<CobrancaPrint>();  //pega os orcamentos-cobranças do orcamento
            if (orcamento.OrcamentoCobranca != null && orcamento.OrcamentoCobranca.Count > 0)
            {
                foreach (Cobrancas orcamentoCobranca in orcamento.OrcamentoCobranca)
                {
                    listCobrancaPrint.Add((CobrancaPrint)orcamentoCobranca);
                }
            }

            List<ContaReceberPrint> listContaReceberPrint = new List<ContaReceberPrint>(); //pega as contas a receber do orçamento (simulações)
            if (orcamento.OrcamentoContaReceber != null && orcamento.OrcamentoContaReceber.Count > 0)
            {
                foreach (ContaReceber orcamentoContaReceber in orcamento.OrcamentoContaReceber.OrderBy(cre => cre.DataVencimento))
                {
                    listContaReceberPrint.Add((ContaReceberPrint)orcamentoContaReceber);
                }
            }

            JsonPrintOrcamento jsonPrintOrcamento = new JsonPrintOrcamento()
            {
                Orcamento = orcamentoPrint,
                Empresa = empresaPrint,
                Vendedor = funcionarioPrint,
                Cliente = clientePrint,
                OrcamentoItem = listOrcamentoItemPrint,
                Cobranca = listCobrancaPrint,
                ContaReceber = listContaReceberPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintOrcamento);
        }

        /// <summary>
        /// Cria o json de ordem de compra
        /// </summary>
        private string GetJsonOrdemCompra(string idRegistro)
        {
            OrdemCompra ordemCompra = OrdemCompraRepository.getInstance().GetById(idRegistro, true).Result;
            OrdemCompraPrint ordemCompraPrint = (OrdemCompraPrint)ordemCompra;

            Empresa empresa = EmpresaRepository.getInstance().GetById(ordemCompra.IdEmpresa, true).Result;
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Cliente cliente = ClienteRepository.getInstance().GetById(ordemCompra.IdCliente, true).Result;
            ClientePrint clientePrint = (ClientePrint)cliente;

            Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(ordemCompra.IdFornecedor, true).Result;
            FornecedorPrint fornecedorPrint = (FornecedorPrint)fornecedor;

            Funcionario comprador = FuncionarioRepository.getInstance().GetById(ordemCompra.IdFuncionario, true).Result;
            FuncionarioPrint compradorPrint = (FuncionarioPrint)comprador;

            Terminal terminal = TerminalRepository.getInstance().GetById(ordemCompra.IdTerminal, true).Result;
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Fornecedor transportadora = FornecedorRepository.getInstance().GetById(ordemCompra.IdTransportadora, true).Result;
            FornecedorPrint transportadorPrint = (FornecedorPrint)transportadora;

            List<OrdemCompraItemPrint> listOrdemCompraItemPrint = new List<OrdemCompraItemPrint>();
            if (ordemCompra.Itens != null && ordemCompra.Itens.Count > 0)
            {
                foreach (OrdemCompraItem ordemCompraItem in ordemCompra.Itens)
                {
                    listOrdemCompraItemPrint.Add((OrdemCompraItemPrint)ordemCompraItem);
                }
            }

            List<CobrancaPrint> listCobrancaPrint = new List<CobrancaPrint>();
            if (ordemCompra.Cobrancas != null && ordemCompra.Cobrancas.Count > 0)
            {
                foreach (Cobrancas cobranca in ordemCompra.Cobrancas)
                {
                    listCobrancaPrint.Add((CobrancaPrint)cobranca);
                }
            }

            JsonPrintOrdemCompra jsonPrintOrdemCompra = new JsonPrintOrdemCompra()
            {
                OrdemCompra = ordemCompraPrint,
                Cliente = clientePrint,
                Empresa = empresaPrint,
                Fornecedor = fornecedorPrint,
                Comprador = compradorPrint,
                Terminal = terminalPrint,
                Tranportadora = transportadorPrint,
                OrdemCompraItem = listOrdemCompraItemPrint,
                Cobrancas = listCobrancaPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintOrdemCompra);
        }

        /// <summary>
        /// Cria o json de ordem de produção
        /// </summary>
        private string GetJsonOrdemProducao(string idRegistro)
        {
            OrdemProducao ordemProducao = OrdemProducaoRepository.getInstance().GetById(idRegistro, true).Result;
            OrdemProducaoPrint ordemProducaoPrint = (OrdemProducaoPrint)ordemProducao;

            Empresa empresa = EmpresaRepository.getInstance().GetById(ordemProducao.IdEmpresa, true).Result;
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Terminal terminal = TerminalRepository.getInstance().GetById(ordemProducao.IdTerminal, true).Result;
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Cliente cliente = ClienteRepository.getInstance().GetById(ordemProducao.IdCliente, true).Result;
            ClientePrint clientePrint = (ClientePrint)cliente;

            List<OrdemProducaoItemPrint> ordemProducaoItensPrintList = new List<OrdemProducaoItemPrint>();
            List<OrdemProducaoItemComponentePrint> ordemProducaoCompoentesPrintList = new List<OrdemProducaoItemComponentePrint>();

            foreach (var item in ordemProducao.Itens)
            {
                OrdemProducaoItemPrint ordemProducaoItemPrint = (OrdemProducaoItemPrint)item;
                ordemProducaoItensPrintList.Add(ordemProducaoItemPrint);

                foreach (var componente in item.Componentes)
                {
                    var componenteExistente = ordemProducaoCompoentesPrintList.FirstOrDefault(x => x.IdProduto == componente.IdProduto);
                    if (componenteExistente != null && string.IsNullOrEmpty(componenteExistente.DescricaoAdicional))
                    {
                        componenteExistente.Quantidade += componente.Quantidade;
                    }
                    else
                    {
                        OrdemProducaoItemComponentePrint ordemProducaoItemComponentePrint = (OrdemProducaoItemComponentePrint)componente;
                        ordemProducaoCompoentesPrintList.Add(ordemProducaoItemComponentePrint);
                    }
                }
            }

            JsonPrintOrdemProducao jsonPrintOrdemProducao = new JsonPrintOrdemProducao()
            {
                OrdemProducao = ordemProducaoPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                OrdemProducaoItens = ordemProducaoItensPrintList,
                OrdemProducaoComponentes = ordemProducaoCompoentesPrintList
            };

            return new JavaScriptSerializer().Serialize(jsonPrintOrdemProducao);
        }

        /// <summary>
        /// Cria o json de ordem de serviço
        /// </summary>
        private string GetJsonOrdemServico(string idRegistro)
        {
            OrdemServico ordemServico = OrdemServicoRepository.getInstance().GetById(idRegistro, true).Result;  //pega a ordem de servico
            OrdemServicoPrint ordemServicoPrint = (OrdemServicoPrint)ordemServico;

            Empresa empresa = EmpresaRepository.getInstance().GetById(ordemServico.IdEmpresa, true).Result;  //pega empresa da ordem de servico
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da ordem de servico
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Terminal terminal = TerminalRepository.getInstance().GetById(ordemServico.IdTerminal, true).Result;  //pega o terminal da ordem de servico
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Cliente cliente = ClienteRepository.getInstance().GetById(ordemServico.IdCliente, true).Result;  //pega cliente da ordem de servico
            ClientePrint clientePrint = (ClientePrint)cliente;

            //OS Modelo - Equipamento
            EquipamentoPrint equipamentoPrint = null;
            List<EquipamentoPrint> listEquipamentoPrint = new List<EquipamentoPrint>();
            if (ordemServico.Equipamentos.Count > 0)
            {
                Equipamento equipamento = EquipamentoRepository.getInstance().GetById(ordemServico.Equipamentos[0].IdEquipamento, true).Result;  //pega equipamento da ordem de servico
                equipamentoPrint = (EquipamentoPrint)equipamento;

                foreach (var item in ordemServico.Equipamentos)
                {
                    equipamento = EquipamentoRepository.getInstance().GetById(item.IdEquipamento, true).Result;  //pega equipamento da ordem de servico
                    var itemPrint = (EquipamentoPrint)equipamento;

                    if (itemPrint != null)
                        listEquipamentoPrint.Add(itemPrint);
                }
            }

            //OS Modelo - Ótica
            Receita receita = ReceitaRepository.getInstance().GetById(ordemServico.IdReceita, true).Result;  //pega receita da ordem de servico
            ReceitaPrint receitaPrint = (ReceitaPrint)receita;

            //OS Modelo - Autocenter
            Veiculo veiculo = VeiculoRepository.getInstance().GetById(ordemServico.IdVeiculo, true).Result;  //pega veiculo da ordem de servico
            VeiculoPrint veiculoPrint = (VeiculoPrint)veiculo;

            //OS Modelo - PetShop
            Animal animal = AnimalRepository.getInstance().GetById(ordemServico.IdAnimal, true).Result;
            AnimalPrint animalPrint = (AnimalPrint)animal;

            RevisaoVeiculoPrint revisaoVeiculoPrint = (RevisaoVeiculoPrint)ordemServico.RevisaoVeiculo;

            List<RevisaoVeiculoItemPrint> listRevisaoVeiculoItemPrint = new List<RevisaoVeiculoItemPrint>();  //pega os itens da venda
            if (ordemServico.RevisaoVeiculo != null && ordemServico.RevisaoVeiculo.ItensRevisao != null && ordemServico.RevisaoVeiculo.ItensRevisao.Count > 0)
            {
                foreach (RevisaoVeiculoItem revisaoVeiculoItem in ordemServico.RevisaoVeiculo.ItensRevisao)
                {
                    listRevisaoVeiculoItemPrint.Add((RevisaoVeiculoItemPrint)revisaoVeiculoItem);
                }
            }

            JsonPrintOrdemServico jsonPrintOrdemServico = new JsonPrintOrdemServico()
            {
                OrdemServico = ordemServicoPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                Equipamento = equipamentoPrint,
                Veiculo = veiculoPrint,
                Animal = animalPrint,
                InAnimal = animalPrint,
                RevisaoVeiculo = revisaoVeiculoPrint,
                RevisaoVeiculoItem = listRevisaoVeiculoItemPrint,
                Receita = receitaPrint,
                ListaEquipamentos = listEquipamentoPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintOrdemServico);
        }

        /// <summary>
        /// Cria o json de conta a receber
        /// </summary>
        private string GetJsonContaReceber(string idRegistro)
        {
            ContaReceber conta = ContaReceberRepository.getInstance().GetById(idRegistro, true).Result;  //pega a conta
            ContaReceberPrint contaReceberPrint = (ContaReceberPrint)conta;

            Empresa empresa = EmpresaRepository.getInstance().GetById(conta.IdEmpresa, true).Result;  //pega empresa 
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Terminal terminal = TerminalRepository.getInstance().GetById(conta.IdTerminal, true).Result;  //pega o terminal 
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Cliente cliente = ClienteRepository.getInstance().GetById(conta.IdCliente, true).Result;  //pega cliente
            ClientePrint clientePrint = (ClientePrint)cliente;

            double valorSaldoTotalCliente = ContaReceberRepository.getInstance().GetValorTotalSaldoCliente(conta.IdCliente, conta.TokenOrganizacao).Result;

            List<PagamentoPrint> listPagamentoPrint = new List<PagamentoPrint>();  //pega os itens da venda
            if (conta != null && conta.Pagamentos != null && conta.Pagamentos.Count > 0)
            {
                foreach (PagamentoContaReceber pagamento in conta.Pagamentos)
                {
                    listPagamentoPrint.Add((PagamentoPrint)pagamento);
                }
            }

            JsonPrintContaReceber JsonPrintRecibo = new JsonPrintContaReceber()
            {
                ContaReceber = contaReceberPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                Pagamentos = listPagamentoPrint,
                NumeroDePagamentos = listPagamentoPrint != null ? listPagamentoPrint.Count : 0,
                ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)conta.ValorPago)),
                ValorSaldoTotalCliente = valorSaldoTotalCliente
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }
        /// <summary>
        /// Cria o json de conta a pagar
        /// </summary>
        private string GetJsonContaPagar(string idRegistro)
        {
            ContaPagar conta = ContaPagarRepository.getInstance().GetById(idRegistro, true).Result;  //pega a ordem de servico
            ContaPagarPrint contaPagarPrint = (ContaPagarPrint)conta;

            Empresa empresa = EmpresaRepository.getInstance().GetById(conta.IdEmpresa, true).Result;  //pega empresa da ordem de servico
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da ordem de servico
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(conta.IdFornecedor, true).Result;
            FornecedorPrint fornecedorPrint = (FornecedorPrint)fornecedor;

            Terminal terminal = TerminalRepository.getInstance().GetById(conta.IdTerminal, true).Result;  //pega o terminal da ordem de servico
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            List<PagamentoContaPagarPrint> listPagamentosPrint = new List<PagamentoContaPagarPrint>();
            if (conta.Pagamentos != null && conta.Pagamentos.Count > 0)
            {
                foreach (PagamentoContaPagar pagamento in conta.Pagamentos)
                {
                    PagamentoContaPagarPrint pagamentoPrint = (PagamentoContaPagarPrint)pagamento;
                    listPagamentosPrint.Add(pagamentoPrint);
                }
            }

            JsonPrintContaPagar JsonPrintRecibo = new JsonPrintContaPagar()
            {
                ContaPagar = contaPagarPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Fornecedor = fornecedorPrint,
                Pagamentos = listPagamentosPrint,
                ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)conta.ValorPago)),
                NumeroDePagamentos = listPagamentosPrint != null ? listPagamentosPrint.Count : 0,
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }
        /// <summary>
        /// Cria o json de conta a receber
        /// </summary>
        private string GetJsonReciboContaReceber(string idRegistro, string aux)
        {
            ContaReceber conta = ContaReceberRepository.getInstance().GetById(idRegistro, true).Result;  //pega a ordem de servico
            ContaReceberPrint contaReceberPrint = (ContaReceberPrint)conta;

            PagamentoContaReceber pagamento = new PagamentoContaReceber();
            if (!string.IsNullOrEmpty(aux))
                pagamento = conta.Pagamentos.Find(x => x.CodigoPagamento == aux);
            else
                pagamento = conta.Pagamentos.OrderByDescending(x => x.DataHoraPagamento).FirstOrDefault();

            PagamentoPrint pagamentoPrint = (PagamentoPrint)pagamento;
            pagamentoPrint.Documento = conta.Documento;
            pagamentoPrint.DataHoraVencimentoDocumento = conta.DataVencimento;
            pagamentoPrint.ValorTotalDocumento = conta.Valor;
            pagamentoPrint.ValorSaldoDocumento = conta.ValorSaldo;
            pagamentoPrint.ValorSaldoAberto = (conta.Valor + conta.ValorJuros - conta.ValorAbatimento) - conta.Pagamentos.Sum(pag => pag.ValorPago) + pagamento.ValorPago;

            List<PagamentoPrint> pagamentos = new List<PagamentoPrint>();
            pagamentos.Add(pagamentoPrint);

            List<PagamentoPrint> listPagamentosEspecie = new List<PagamentoPrint>();
            listPagamentosEspecie.Add(new PagamentoPrint() { EspeciePagamento = pagamentoPrint.EspeciePagamento, ValorPago = pagamentoPrint.ValorPago });

            Empresa empresa = EmpresaRepository.getInstance().GetById(conta.IdEmpresa, true).Result;  //pega empresa da ordem de servico
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da ordem de servico
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Terminal terminal = TerminalRepository.getInstance().GetById(conta.IdTerminal, true).Result;  //pega o terminal da ordem de servico
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Cliente cliente = ClienteRepository.getInstance().GetById(conta.IdCliente, true).Result;  //pega cliente da ordem de servico
            ClientePrint clientePrint = (ClientePrint)cliente;

            double valorSaldoTotalCliente = ContaReceberRepository.getInstance().GetValorTotalSaldoCliente(conta.IdCliente, conta.TokenOrganizacao).Result;

            JsonPrintReciboContaReceber JsonPrintRecibo = new JsonPrintReciboContaReceber()
            {
                ContaReceber = contaReceberPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                Pagamento = pagamentoPrint,
                Pagamentos = pagamentos, //Para impressão A4
                PagamentosEspecie = listPagamentosEspecie,
                ValorTotal = conta.Valor,
                ValorTotalPago = pagamento.ValorPago,
                ValorSaldoTotal = conta.ValorSaldo,
                ValorSaldoAbertoTotal = pagamentoPrint.ValorSaldoAberto,
                ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)pagamentoPrint.ValorPago)),
                ValorSaldoTotalCliente = valorSaldoTotalCliente
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }

        private string GetJsonReciboContaReceberLote(string parametroIds)
        {
            var idsRegistros = parametroIds.Split(";").Distinct().ToList();

            ContaReceber conta = new ContaReceber();
            List<PagamentoPrint> listPagamentos = new List<PagamentoPrint>();
            List<PagamentoPrint> listPagamentosEspecie = new List<PagamentoPrint>();
            double valorTotal = 0;
            double valorTotalPago = 0;
            double valorSaldoTotal = 0;
            double valorSaldoAbertoTotal = 0;
            double valorSaldoTotalCliente = 0;

            foreach (string idRegistro in idsRegistros)
            {
                if (!string.IsNullOrEmpty(idRegistro))
                {
                    conta = ContaReceberRepository.getInstance().GetById(idRegistro, true).Result;  //pega a ordem de servico
                    ContaReceberPrint contaReceberPrint = (ContaReceberPrint)conta;

                    PagamentoContaReceber ultimoPagamento = conta.Pagamentos.OrderByDescending(x => x.DataHoraPagamento).FirstOrDefault();
                    var pagamentos = conta.Pagamentos.Where(x => x.IdentificadorBaixa == ultimoPagamento.IdentificadorBaixa).ToList();
                    var valorPagamentosAnteriores = conta.Pagamentos.Where(x => x.IdentificadorBaixa != ultimoPagamento.IdentificadorBaixa).Sum(pag => pag.ValorPago);

                    foreach (var pagamento in pagamentos)
                    {
                        PagamentoPrint pagamentoPrintAux = (PagamentoPrint)pagamento;
                        pagamentoPrintAux.Documento = conta.Documento;
                        pagamentoPrintAux.DataHoraVencimentoDocumento = conta.DataVencimento;
                        pagamentoPrintAux.ValorTotalDocumento = conta.Valor;
                        //pagamentoPrintAux.ValorSaldoDocumento = conta.ValorSaldo;
                        pagamentoPrintAux.ValorSaldoDocumento = (conta.Valor + conta.ValorJuros - conta.ValorAbatimento) - valorPagamentosAnteriores - pagamento.ValorPago;
                        //pagamentoPrintAux.ValorSaldoAberto = (conta.Valor + conta.ValorJuros - conta.ValorAbatimento) - conta.Pagamentos.Sum(pag => pag.ValorPago) + pagamento.ValorPago;
                        pagamentoPrintAux.ValorSaldoAberto = (conta.Valor + conta.ValorJuros - conta.ValorAbatimento) - valorPagamentosAnteriores;

                        listPagamentos.Add(pagamentoPrintAux);

                        valorTotalPago += pagamento.ValorPago;
                        valorPagamentosAnteriores += pagamento.ValorPago;

                        int index = listPagamentosEspecie.FindIndex(pag => pag.EspeciePagamento.Equals(pagamentoPrintAux.EspeciePagamento));
                        if (index == -1)
                            listPagamentosEspecie.Add(new PagamentoPrint() { EspeciePagamento = pagamentoPrintAux.EspeciePagamento, ValorPago = pagamentoPrintAux.ValorPago });
                        else
                            listPagamentosEspecie[index].ValorPago += pagamentoPrintAux.ValorPago;
                    }
                    valorTotal += conta.Valor;
                    valorSaldoTotal += conta.ValorSaldo;
                    valorSaldoAbertoTotal += (conta.Valor + conta.ValorJuros - conta.ValorAbatimento) - valorPagamentosAnteriores;
                }
            }

            Empresa empresa = EmpresaRepository.getInstance().GetById(conta.IdEmpresa, true).Result;  //pega empresa da ordem de servico
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            Terminal terminal = TerminalRepository.getInstance().GetById(conta.IdTerminal, true).Result;  //pega o terminal da ordem de servico
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            Cliente cliente = ClienteRepository.getInstance().GetById(conta.IdCliente, true).Result;  //pega cliente da ordem de servico
            ClientePrint clientePrint = (ClientePrint)cliente;

            valorSaldoTotalCliente = ContaReceberRepository.getInstance().GetValorTotalSaldoCliente(conta.IdCliente, conta.TokenOrganizacao).Result;

            JsonPrintReciboContaReceber JsonPrintRecibo = new JsonPrintReciboContaReceber()
            {
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Cliente = clientePrint,
                Pagamentos = listPagamentos,
                PagamentosEspecie = listPagamentosEspecie,
                ValorTotal = valorTotal,
                ValorTotalPago = valorTotalPago,
                ValorSaldoTotal = valorSaldoTotal,
                ValorSaldoAbertoTotal = valorSaldoAbertoTotal,
                ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)valorTotalPago)),
                ValorSaldoTotalCliente = valorSaldoTotalCliente,
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }

        /// <summary>
        /// Cria o json de conta a pagar
        /// </summary>
        private string GetJsonReciboContaPagar(string idRegistro, string aux)
        {
            ContaPagar conta = ContaPagarRepository.getInstance().GetById(idRegistro, true).Result;  //pega a ordem de servico
            ContaPagarPrint contaPagarPrint = (ContaPagarPrint)conta;

            PagamentoContaPagar pagamento = conta.Pagamentos.Find(x => x.CodigoPagamento == aux);
            PagamentoContaPagarPrint pagamentoPrint = (PagamentoContaPagarPrint)pagamento;

            Empresa empresa = EmpresaRepository.getInstance().GetById(conta.IdEmpresa, true).Result;  //pega empresa da ordem de servico
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da ordem de servico
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(conta.IdFornecedor, true).Result;
            FornecedorPrint fornecedorPrint = (FornecedorPrint)fornecedor;

            Terminal terminal = TerminalRepository.getInstance().GetById(conta.IdTerminal, true).Result;  //pega o terminal da ordem de servico
            TerminalPrint terminalPrint = (TerminalPrint)terminal;

            JsonPrintReciboContaPagar JsonPrintRecibo = new JsonPrintReciboContaPagar()
            {
                ContaPagar = contaPagarPrint,
                Empresa = empresaPrint,
                Terminal = terminalPrint,
                Fornecedor = fornecedorPrint,
                Pagamento = pagamentoPrint,
                ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)pagamentoPrint.ValorPago)),
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }

        /// <summary>
        /// Cria o json de lista de contas a receber de um cliente
        /// </summary>
        private string GetJsonContaReceberCliente(AuthenticatedUser _user, string idRegistro, string aux)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);

            Cliente cliente = new Cliente();
            Empresa empresa = new Empresa();
            List<ContaReceber> listContaReceber = new List<ContaReceber>();

            ClientePrint clientePrint = new ClientePrint();
            EmpresaPrint empresaPrint = new EmpresaPrint();
            List<ContaReceberPrint> listCrePrint = new List<ContaReceberPrint>();

            double valorCres = 0;
            double valorPagoCres = 0;
            double valorAVencerTotal = 0;
            double valorVencidasTotal = 0;
            double valorJurosTotal = 0;
            double valorAbatimentoTotal = 0;
            double valorTotal = 0;

            string parameters = aux + $"&empresa={idRegistro}";
            listContaReceber = ContaReceberRepository.getInstance().Find(userNovo, parameters).Result;
            //string idEmpresa = Functions.GetTextFromQueryParameter(aux, "empresa");
            string idEmpresa = idRegistro;
            string idCliente = Functions.GetTextFromQueryParameter(aux, "cliente");

            if (listContaReceber.Count > 0 || !string.IsNullOrEmpty(idEmpresa))
            {
                empresa = EmpresaRepository.getInstance().GetById(string.IsNullOrEmpty(idEmpresa) ? listContaReceber[0].IdEmpresa : idEmpresa, true).Result;  //pega empresa 
                empresaPrint = (EmpresaPrint)empresa;
                EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem
                empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;
            }
            if (listContaReceber.Count > 0 || !string.IsNullOrEmpty(idCliente))
            {
                cliente = ClienteRepository.getInstance().GetById(string.IsNullOrEmpty(idCliente) ? listContaReceber[0].IdCliente : idCliente, true).Result;  //pega cliente
                clientePrint = (ClientePrint)cliente;
            }

            foreach (ContaReceber conta in listContaReceber)
            {
                ContaReceberPrint contaReceberPrint = (ContaReceberPrint)conta;
                listCrePrint.Add(contaReceberPrint);

                if (conta.DataVencimento > DateTime.Now.ToUniversalTime())
                    valorAVencerTotal += conta.ValorSaldo;
                else
                    valorVencidasTotal += conta.ValorSaldo;

                valorCres += conta.Valor;
                valorPagoCres += conta.ValorPago;
                valorJurosTotal += conta.ValorJuros;
                valorAbatimentoTotal += conta.ValorAbatimento;
                valorTotal += conta.ValorSaldo;
            }

            JsonPrintContaReceberCliente JsonPrintRecibo = new JsonPrintContaReceberCliente()
            {
                ListContaReceber = listCrePrint,
                Empresa = empresaPrint,
                Cliente = clientePrint,
                ValorCres = valorCres,
                ValorPagoCres = valorPagoCres,
                ValorAVencerTotal = valorAVencerTotal,
                ValorVencidasTotal = valorVencidasTotal,
                ValorJurosTotal = valorJurosTotal,
                ValorAbatimentoTotal = valorAbatimentoTotal,
                ValorTotal = valorTotal,
            };

            return new JavaScriptSerializer().Serialize(JsonPrintRecibo);
        }

        /// <summary>
        /// Cria o json de romaneio compra
        /// </summary>
        private string GetJsonRomaneioCompra(string idRegistro)
        {
            Compra compra = CompraRepository.getInstance().GetById(idRegistro, true).Result; //pega a compra
            CompraPrint compraPrint = (CompraPrint)compra;

            Empresa empresa = EmpresaRepository.getInstance().GetById(compra.IdEmpresa, true).Result;  //pega empresa da compra
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(compra.IdFornecedor, true).Result; //pega o fornecedor
            FornecedorPrint fornecedorPrint = (FornecedorPrint)fornecedor;

            List<CompraItemPrint> listCompraItemRomaneioPrint = new List<CompraItemPrint>();  //lista de itens agrupados para romaneio

            //Agrupa itens para romaneio
            foreach (CompraItem compraItem in compra.Itens)
            {

                //se inner de produto não for null e já possui o item com o código na lista soma quantidade
                if (compraItem.InProduto != null && listCompraItemRomaneioPrint.Exists(item => item.Codigo == compraItem.InProduto?.Codigo))
                {

                    foreach (var item in listCompraItemRomaneioPrint)
                    {
                        if (item.Codigo == compraItem.InProduto.Codigo)
                        {
                            item.Quantidade += Math.Round(compraItem.QuantidadeFinal, 4, MidpointRounding.AwayFromZero);

                        }
                    }
                }
                else
                {

                    CompraItemPrint item = (CompraItemPrint)compraItem;
                    Produto prod = ProdutoRepository.getInstance().GetById(compraItem.IdProduto, false).Result;

                    prod.Referencias.ForEach(x =>
                    {
                        if (x.IdFornecedor == compra.IdFornecedor)
                        {
                            item.ReferenciaFornecedor = x.Ref;
                        }
                    });

                    if (prod.EstoquesDoProduto.Count > 0 && compra.IdLocalizacaoEstoque != null)
                    {
                        ProdutoEstoque estoqueProduto = prod.EstoquesDoProduto.Find(x => x.IdLocalizacaoEstoque.Equals(compra.IdLocalizacaoEstoque));
                        if (estoqueProduto != null)
                            item.IdentificadorEstoque = estoqueProduto.IdentificadorEstoque;
                    }


                    listCompraItemRomaneioPrint.Add(item);
                }



            }

            JsonPrintCompra jsonPrintRomaneioCompra = new JsonPrintCompra()
            {
                Compra = compraPrint,
                Empresa = empresaPrint,
                Fornecedor = fornecedorPrint,
                CompraItem = listCompraItemRomaneioPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintRomaneioCompra);
        }

        /// <summary>
        /// Cria o json de romaneio nfe
        /// </summary>
        private string GetJsonRomaneioNfe(string idRegistro)
        {
            Nf nfe = NfRepository.getInstance().GetById(idRegistro, true).Result; //pega a NF-e
            NfPrint nfePrint = (NfPrint)nfe;

            Empresa empresa = EmpresaRepository.getInstance().GetById(nfe.IdEmpresa, true).Result;  //pega empresa da NF-e
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            ClientePrint clientePrint = new ClientePrint();
            FornecedorPrint fornecedorPrint = new FornecedorPrint();
            DestinatarioPrint destinatarioPrint;
            if (nfe.TipoDestinatario.ToUpper().Equals("CLIENTE"))
            {
                Cliente cliente = ClienteRepository.getInstance().GetById(nfe.IdDestinatario, true).Result; //pega o cliente
                destinatarioPrint = new DestinatarioPrint(cliente, null);
            }
            else
            {
                Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(nfe.IdDestinatario, true).Result; //pega o fornecedor
                destinatarioPrint = new DestinatarioPrint(null, fornecedor);
            }

            List<NfItemPrint> listNfItemRomaneioPrint = new List<NfItemPrint>();  //lista de itens agrupados para romaneio

            //Agrupa itens para romaneio
            foreach (NfItem nfItem in nfe.Itens)
            {
                //se inner de produto não for null e já possui o item com o código na lista soma quantidade
                if (nfItem.InProduto != null && listNfItemRomaneioPrint.Exists(item => item.Codigo == nfItem.InProduto?.Codigo))
                {
                    listNfItemRomaneioPrint.ForEach(item =>
                    {
                        if (item.Codigo == nfItem.InProduto.Codigo)
                            item.Quantidade += Math.Round(nfItem.Quantidade, 4, MidpointRounding.AwayFromZero);
                    });
                }
                else
                    listNfItemRomaneioPrint.Add((NfItemPrint)nfItem);
            }

            JsonPrintNfe jsonPrintRomaneioNfe = new JsonPrintNfe()
            {
                Nfe = nfePrint,
                Empresa = empresaPrint,
                Destinatario = destinatarioPrint,
                Itens = listNfItemRomaneioPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintRomaneioNfe);
        }

        /// <summary>
        /// Cria o json de romaneio plano transporte
        /// </summary>
        private string GetJsonRomaneioPlanoTransporte(string idRegistro)
        {
            PlanoTransporte planoTransporte = PlanoTransporteRepository.getInstance().GetById(idRegistro, true).Result;  //pega o plano de transporte
            PlanoTransportePrint planoTransportePrint = (PlanoTransportePrint)planoTransporte;

            Empresa empresa = EmpresaRepository.getInstance().GetById(planoTransporte.IdEmpresa, true).Result;  //pega empresa do plano de transporte
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Fornecedor transportadora = FornecedorRepository.getInstance().GetById(planoTransporte.IdTransportadora, true).Result;
            FornecedorPrint transportadoraPrint = (FornecedorPrint)transportadora;

            Veiculo veiculo = VeiculoRepository.getInstance().GetById(planoTransporte.IdVeiculo, true).Result;
            VeiculoPrint veiculoPrint = (VeiculoPrint)veiculo;

            List<VendaRomaneioPrint> listVendaRomaneioPrint = new List<VendaRomaneioPrint>();  //pega as vendas com itens do plano de transporte
            List<VendaItemRomaneioPrint> listVendaItemRomaneioPrint = new List<VendaItemRomaneioPrint>();  //lista de itens agrupados para romaneio
            List<CobrancaRomaneioPrint> listCobrancaRomaneioPrint = new List<CobrancaRomaneioPrint>();

            if (planoTransporte.ListVenda != null && planoTransporte.ListVenda.Count > 0)
            {
                foreach (string idVenda in planoTransporte.ListVenda)
                {
                    Venda venda = VendaRepository.getInstance().GetById(idVenda, true).Result; //busca venda
                    if (venda != null && venda.Itens.Count > 0 && venda.IdCliente != null) //porque a classe de vendaRomaneio precisa da venda, itens venda e cliente da venda
                    {
                        Cliente cliente = ClienteRepository.getInstance().GetById(venda.IdCliente, true).Result;  //pega cliente da venda
                        VerificaEnderecoCliente(cliente, venda, null);  //verifica se não informou um endereço na venda, pois se informou é este que deve imprimir
                        ClientePrint clientePrint = (ClientePrint)cliente;

                        #region Itens agrupados para romaneio
                        List<VendaItemPrint> listVendaItemPrint = new List<VendaItemPrint>();  //pega os itens da venda
                        if (venda.Itens != null && venda.Itens.Count > 0)
                        {
                            foreach (VendaItem vendaItem in venda.Itens)
                            {
                                planoTransportePrint.QuantidadeTotalItens += vendaItem.Quantidade;
                                listVendaItemPrint.Add((VendaItemPrint)vendaItem);

                                //se inner de produto não for null e já possui o item com o código na lista soma quantidade
                                if (vendaItem.InProduto != null && listVendaItemRomaneioPrint.Exists(item => item.Codigo == vendaItem.InProduto?.Codigo))
                                {
                                    listVendaItemRomaneioPrint.ForEach(item =>
                                    {
                                        if (item.Codigo == vendaItem.InProduto.Codigo)
                                            item.Quantidade += vendaItem.Quantidade;
                                    });
                                }
                                else if (vendaItem.InProduto != null)
                                    listVendaItemRomaneioPrint.Add((VendaItemRomaneioPrint)vendaItem);
                            }
                        }
                        #endregion Itens agrupados para romaneio

                        #region Se tiver Nfe vinculada na venda adiciona
                        Nf nfeVinculada = null;
                        string especiesNfeVinculadaToString = "";
                        if (venda.Vinculos.Count > 0 && venda.Vinculos.Exists(v => v.Proprietario.Equals("NFe")))
                        {
                            var idNfe = venda.Vinculos.Find(x => x.Proprietario.Equals("NFe")).IdProprietario;
                            nfeVinculada = NfRepository.getInstance().GetById(idNfe, false).Result;

                            if (nfeVinculada != null && nfeVinculada.NfeCobranca.Count > 0)
                                foreach (var item in nfeVinculada.NfeCobranca)
                                    if (item.InEspeciePagamento != null)
                                        especiesNfeVinculadaToString += item.InEspeciePagamento.Descricao + "/";
                        }
                        #endregion
                        VendaRomaneioPrint vendaRomaneioPrint = new VendaRomaneioPrint((VendaPrint)venda, listVendaItemPrint, clientePrint, nfeVinculada);

                        #region Cobranças agrupadas para romaneio
                        string especieVendaToString = "";
                        if (venda.VendaCobranca != null && venda.VendaCobranca.Count > 0)
                        {
                            foreach (Cobrancas cobranca in venda.VendaCobranca)
                            {

                                if (cobranca.InEspeciePagamento != null)
                                    especieVendaToString += cobranca.InEspeciePagamento.Descricao + "/";

                                //se inner de espécie de pagamento não for null e já possui uma espécie de pagamento com a descrição na lista soma quantidade
                                if (cobranca.InEspeciePagamento != null && listCobrancaRomaneioPrint.Exists(item => item.EspeciePagamento == cobranca.InEspeciePagamento?.Descricao))
                                {
                                    listCobrancaRomaneioPrint.ForEach(item =>
                                    {
                                        if (item.EspeciePagamento == cobranca.InEspeciePagamento.Descricao)
                                        {
                                            item.Valor += cobranca.Valor;
                                            VendaRomaneioPrint vendaRomaneioPrintNew = new VendaRomaneioPrint((VendaPrint)venda, listVendaItemPrint, clientePrint, nfeVinculada);
                                            vendaRomaneioPrintNew.Venda.ValorVendaPorEspeciePagamento = cobranca.Valor;
                                            item.VendasRomaneio.Add(vendaRomaneioPrintNew);
                                        }
                                    });
                                }
                                else
                                {
                                    CobrancaRomaneioPrint cobrancaRomaneio = new CobrancaRomaneioPrint(cobranca);
                                    VendaRomaneioPrint vendaRomaneioPrintNew = new VendaRomaneioPrint((VendaPrint)venda, listVendaItemPrint, clientePrint, nfeVinculada);
                                    vendaRomaneioPrintNew.Venda.ValorVendaPorEspeciePagamento = cobranca.Valor;
                                    cobrancaRomaneio.VendasRomaneio.Add(vendaRomaneioPrintNew);
                                    listCobrancaRomaneioPrint.Add(cobrancaRomaneio);
                                }
                            }
                            especieVendaToString = !string.IsNullOrEmpty(especieVendaToString) ? especieVendaToString.Remove(especieVendaToString.Length - 1) : "";
                            especiesNfeVinculadaToString = !string.IsNullOrEmpty(especiesNfeVinculadaToString) ? especiesNfeVinculadaToString.Remove(especiesNfeVinculadaToString.Length - 1) : "";
                            EspeciesPorExtensoRomaneioPrint especiesToString = new EspeciesPorExtensoRomaneioPrint(especieVendaToString, especiesNfeVinculadaToString);
                            vendaRomaneioPrint.TotalEspeciesPorExtenso = especiesToString;
                        }
                        #endregion Cobranças agrupadas para romaneio

                        listVendaRomaneioPrint.Add(vendaRomaneioPrint);
                    }
                }
            }

            JsonPrintPlanoTransporte jsonPrintPlanoTransporte = new JsonPrintPlanoTransporte()
            {
                PlanoTransporte = planoTransportePrint,
                Empresa = empresaPrint,
                Veiculo = veiculoPrint,
                Transportadora = transportadoraPrint,
                Vendas = listVendaRomaneioPrint,
                ItensRomaneio = listVendaItemRomaneioPrint,
                CobrancaTotal = listCobrancaRomaneioPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintPlanoTransporte);
        }

        /// <summary>
        /// Cria o json de orçamento
        /// </summary>
        private string GetJsonServicoTerceirizado(string idRegistro)
        {
            ServicoTerceirizado servicoTerceirizado = ServicoTerceirizadoRepository.getInstance().GetById(idRegistro, true).Result;  //pega o orcamento
            ServicoTerceirizadoPrint servicoTerceirizadoPrint = (ServicoTerceirizadoPrint)servicoTerceirizado;

            Empresa empresa = EmpresaRepository.getInstance().GetById(servicoTerceirizado.IdEmpresa, true).Result;  //pega empresa
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Fornecedor fornecedor = FornecedorRepository.getInstance().GetById(servicoTerceirizado.IdFornecedor, false).Result;
            FornecedorPrint fornecedorPrint = (FornecedorPrint)fornecedor;

            Funcionario funcionario = FuncionarioRepository.getInstance().GetById(servicoTerceirizado.IdFuncionario, false).Result;
            FuncionarioPrint funcionarioPrint = (FuncionarioPrint)funcionario;

            Cliente cliente = ClienteRepository.getInstance().GetById(servicoTerceirizado.IdCliente, true).Result;  //pega cliente do 
            ClientePrint clientePrint = (ClientePrint)cliente;

            // Veiculo
            List<VeiculoPrint> listVeiculosPrint = new List<VeiculoPrint>(); 
            foreach(var veiculo in servicoTerceirizado.Veiculos)
            {
                Veiculo retVeiculo = VeiculoRepository.getInstance().GetById(veiculo.idVeiculo, false).Result;
                if (retVeiculo != null)
                    listVeiculosPrint.Add((VeiculoPrint)retVeiculo);
            }
            // Equipamento
            List<EquipamentoPrint> listEquipamentosPrint = new List<EquipamentoPrint>();
            foreach (var equipamento in servicoTerceirizado.Equipamentos)
            {
                Equipamento retEquipamento = EquipamentoRepository.getInstance().GetById(equipamento.idEquipamento, false).Result;
                if (retEquipamento != null)
                    listEquipamentosPrint.Add((EquipamentoPrint)retEquipamento);
            }

            // Servicos
            List<ServicoTerceirizadServicoItem> listServicos = new List<ServicoTerceirizadServicoItem>();
            foreach (var servico in servicoTerceirizado.Servicos)
            {
                listServicos.Add(servico);
            }
            // Produtos
            List<ServicoTerceirizadoProdutoItem> listProdutos = new List<ServicoTerceirizadoProdutoItem>();
            foreach (var produto in servicoTerceirizado.Produtos)
            {
                listProdutos.Add(produto);
            }

            //Cobranças
            List<CobrancaPrint> listCobrancaPrint = new List<CobrancaPrint>();  //pega os orcamentos-cobranças do orcamento
            if (servicoTerceirizado.Cobrancas != null && servicoTerceirizado.Cobrancas.Count > 0)
            {
                foreach (Cobrancas cobranca in servicoTerceirizado.Cobrancas)
                {
                    listCobrancaPrint.Add((CobrancaPrint)cobranca);
                }
            }
            //ContasPagar
            List<ContaPagarPrint> listContasPagarPrint = new List<ContaPagarPrint>();
            List<ContaPagar> listCpas = ContaPagarRepository.getInstance().GetByIdVinculo(idRegistro, false).Result;
            if (listCpas.Count > 0)
            {
                foreach (ContaPagar cpa in listCpas)
                {
                    listContasPagarPrint.Add((ContaPagarPrint)cpa);
                }
            }

            JsonPrintServicoTerceirizado jsonPrintServicoTerceirizado = new JsonPrintServicoTerceirizado()
            {
                ServicoTerceirizado = servicoTerceirizadoPrint,
                Empresa = empresaPrint,
                Fornecedor = fornecedorPrint,
                Cliente = clientePrint,
                Funcionario = funcionarioPrint,
                Veiculos = listVeiculosPrint,
                Equipamentos = listEquipamentosPrint,
                Produtos = listProdutos,
                Servicos = listServicos,
                Cobrancas = listCobrancaPrint,
                ContasPagar = listContasPagarPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintServicoTerceirizado);
        }

        /// <summary>
        /// Cria o json de romaneio plano transporte
        /// </summary>
        private string GetJsonTransferenciaEstoque(string idRegistro)
        {
            TransferenciaEstoque transferenciaEstoque = TransferenciaEstoqueRepository.getInstance().GetById(idRegistro, true).Result;
            TransferenciaEstoquePrint transferenciaEstoquePrint = (TransferenciaEstoquePrint)transferenciaEstoque;

            Empresa empresaOrigem = EmpresaRepository.getInstance().GetById(transferenciaEstoque.IdEmpresaOrigem, true).Result;
            EmpresaPrint empresaOrigemPrint = (EmpresaPrint)empresaOrigem;
            //EmpresaImagem empresaOrigemImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresaOrigem._id).Result; 
            //empresaOrigemPrint.Imagem = empresaOrigemImagem == null ? null : empresaOrigemImagem.CodeBase64;

            Empresa empresaDestino = EmpresaRepository.getInstance().GetById(transferenciaEstoque.IdEmpresaDestino, true).Result;
            EmpresaPrint empresaDestinoPrint = (EmpresaPrint)empresaDestino;
            //EmpresaImagem empresaDestinoImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresaDestino._id).Result;  
            //empresaDestinoPrint.Imagem = empresaDestinoImagem == null ? null : empresaDestinoImagem.CodeBase64;

            LocalizacaoEstoque localizacaoEstoqueOrigem = LocalizacaoEstoqueRepository.getInstance().GetById(transferenciaEstoque.IdLocalizacaoEstoqueOrigem, true).Result;
            LocalizacaoEstoquePrint localizacaoEstoqueOrigemPrint = (LocalizacaoEstoquePrint)localizacaoEstoqueOrigem;

            LocalizacaoEstoque localizacaoEstoqueDestino = LocalizacaoEstoqueRepository.getInstance().GetById(transferenciaEstoque.IdLocalizacaoEstoqueDestino, true).Result;
            LocalizacaoEstoquePrint localizacaoEstoqueDestinoPrint = (LocalizacaoEstoquePrint)localizacaoEstoqueDestino;


            List<TransferenciaEstoqueItemPrint> listTransferenciaEstoqueItemPrint = new List<TransferenciaEstoqueItemPrint>();
            if (transferenciaEstoque.Itens != null && transferenciaEstoque.Itens.Count > 0)
            {
                foreach (TransferenciaEstoqueItem transferenciaEstoqueItem in transferenciaEstoque.Itens)
                {
                    listTransferenciaEstoqueItemPrint.Add((TransferenciaEstoqueItemPrint)transferenciaEstoqueItem);
                }
            }


            JsonPrintTransferenciaEstoque jsonPrintTransferencia = new JsonPrintTransferenciaEstoque()
            {
                TransferenciaEstoque = transferenciaEstoquePrint,
                EmpresaOrigem = empresaOrigemPrint,
                EmpresaDestino = empresaDestinoPrint,
                LocalizacaoEstoqueOrigem = localizacaoEstoqueOrigemPrint,
                LocalizacaoEstoqueDestino = localizacaoEstoqueDestinoPrint,
                TransferenciaEstoqueItem = listTransferenciaEstoqueItemPrint

            };

            return new JavaScriptSerializer().Serialize(jsonPrintTransferencia);
        }


        /// <summary>
        /// Cria o json de venda
        /// </summary>
        private string GetJsonVenda(AuthenticatedUser _userNovo, string idRegistro)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_userNovo);
            Usuario usuario = UsuarioRepository.getInstance().GetByEmail(userNovo.Email).Result;

            Venda venda = VendaRepository.getInstance().GetById(idRegistro, true).Result;  //pega a venda
            VendaPrint vendaPrint = (VendaPrint)venda;

            GatilhoStatus gatilhoStatus = GatilhoStatusRepository.getInstance().Get(userNovo).Result;
            if (gatilhoStatus != null && !string.IsNullOrEmpty(gatilhoStatus.IdStatusVendaImpressa)
                && venda.IdStatus != gatilhoStatus.IdStatusVendaImpressa)
            {
                venda.IdStatus = gatilhoStatus.IdStatusVendaImpressa;
                var retVenda = VendaRepository.getInstance().UpdateStatusVenda(userNovo, venda);
            }

            var retConfig = false;
            var config = ConfiguracaoRepository.getInstance().GetAtivo(userNovo.TokenOrganizacao, 49).Result;

            if (!venda.Impressa)
                retConfig = VendaRepository.getInstance().RegistrarImpressao(userNovo, venda).Result;
            else if (config && !(usuario.InGrupoUsuario.Descricao == "ADMINISTRAÇÃO"))
                throw new Exception("Usuário sem permissão para imprimir venda novamente");

            Funcionario vendedor = FuncionarioRepository.getInstance().GetById(venda.IdFuncionario, true).Result;
            if (vendedor != null)
            {
                if (vendedor.Telefones.Count > 0)
                {
                    try
                    {
                        var strTelefone = vendedor.Telefones[0].Numero;
                        var telefone = Convert.ToInt64(strTelefone);
                        if (strTelefone.Length == 11)
                        {
                            strTelefone = string.Format("{0:(##) #####-####}", telefone);
                        }
                        if (strTelefone.Length == 10)
                        {
                            strTelefone = string.Format("{0:(##) ####-####}", telefone);
                        }
                        vendaPrint.TelefoneVendedor = strTelefone;
                    }
                    catch
                    {
                        vendaPrint.TelefoneVendedor = "";
                    }
                }
            }

            Empresa empresa = EmpresaRepository.getInstance().GetById(venda.IdEmpresa, true).Result;  //pega empresa da venda
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;
            EmpresaImagem empresaImagem = EmpresaImagemRepository.getInstance().GetPrincipalByIdEmpresa(empresa._id).Result;  //pega imagem da empresa
            empresaPrint.Imagem = empresaImagem == null ? null : empresaImagem.CodeBase64;

            Cliente cliente = ClienteRepository.getInstance().GetById(venda.IdCliente, true).Result;  //pega cliente da venda
            VerificaEnderecoCliente(cliente, venda, null);  //verifica se não informou um endereço na venda, pois se informou é este que deve imprimir
            ClientePrint clientePrint = (ClientePrint)cliente;

            bool config35 = ConfiguracaoRepository.getInstance().GetAtivo(venda.TokenOrganizacao, 35).Result;

            if (config35)
            {
                List<ContaReceber> cresCliente = ContaReceberRepository.getInstance().GetByCliente(userNovo, cliente._id).Result;
                cresCliente.ForEach(cre => clientePrint.SaldoDevedor += cre.ValorSaldo);
            }

            List<VendaItemPrint> listVendaItemPrint = new List<VendaItemPrint>();  //pega os itens da venda
            if (venda.Itens != null && venda.Itens.Count > 0)
            {
                foreach (VendaItem vendaItem in venda.Itens)
                {
                    listVendaItemPrint.Add((VendaItemPrint)vendaItem);
                }
            }

            List<CobrancaPrint> listCobrancaPrint = new List<CobrancaPrint>();  //pega as venda-cobranças da venda
            if (venda.VendaCobranca != null && venda.VendaCobranca.Count > 0)
            {
                foreach (Cobrancas vendaCobranca in venda.VendaCobranca)
                {
                    listCobrancaPrint.Add((CobrancaPrint)vendaCobranca);
                }
            }

            List<ContaReceberPrint> listContaReceberPrint = new List<ContaReceberPrint>();  //pega as contas a receber da venda
            List<ContaReceber> listContaReceber = ContaReceberRepository.getInstance().GetByIdVinculo(venda._id, true).Result;
            if (listContaReceber != null && listContaReceber.Count > 0)
            {
                foreach (ContaReceber contaReceber in listContaReceber.OrderBy(cre => cre.DataVencimento))
                {
                    listContaReceberPrint.Add((ContaReceberPrint)contaReceber);
                }
            }

            var vinculosOS = venda.Vinculos.Where(x => x.Proprietario == "OrdemServico");
            var listOrdensServicoPrint = new List<OrdemServicoPrint>();

            foreach (var vinculoOS in vinculosOS)
            {
                var ordemServico = OrdemServicoRepository.getInstance().GetById(vinculoOS.IdProprietario, true).Result; 
                if (ordemServico != null)
                {
                    var ordemServicoPrint = (OrdemServicoPrint)ordemServico;
                    listOrdensServicoPrint.Add(ordemServicoPrint);
                }
            }
            
            JsonPrintVenda jsonPrintVenda = new JsonPrintVenda()
            {
                Venda = vendaPrint,
                Empresa = empresaPrint,
                Cliente = clientePrint,
                VendaItem = listVendaItemPrint,
                Cobranca = listCobrancaPrint,
                ContaReceber = listContaReceberPrint,
                OrdensServico = listOrdensServicoPrint,
            };

            return new JavaScriptSerializer().Serialize(jsonPrintVenda);
        }

        /// <summary>
        /// Cria o json de lista de produtos de uma empresa
        /// </summary>
        private string GetJsonListaProdutoAsync(AuthenticatedUser _user, string idEmpresa, string idTabelaPreco, string idLocalizacaoEstoque)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            Empresa empresa = EmpresaRepository.getInstance().GetById(idEmpresa, true).Result; //pega a empresa
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            //para buscar a primeira tabela de preço, posteriormente buscar somente pelo id passado em parametro
            List<TabelaPreco> listTabelaPreco = TabelaPrecoRepository.getInstance().GetAll(userNovo).Result;

            List<string> listIdTabelaPreco = new List<string>();
            listTabelaPreco.ForEach(item => listIdTabelaPreco.Add(item._id));
            string[] arrayIdTabelaPreco = listIdTabelaPreco.ToArray();

            List<Produto> listProduto = _context.Produtos.Find(x => x.TokenOrganizacao.Equals(empresa.TokenOrganizacao)).SortBy(x => x.Descricao).ToList();

            List<ProdutoPrint> listProdutoPrint = new List<ProdutoPrint>();

            if (listProduto != null && listProduto.Count > 0)
            {
                foreach (Produto produto in listProduto)
                {
                    //produto.Precos = ProdutoTabelaPrecoRepository.getInstance().GetPrecos(_user.TokenOrganizacao, produto._id, listIdTabelaPreco.ToArray()).Result;
                    listProdutoPrint.Add((ProdutoPrint)produto);
                }
            }

            JsonPrintProduto jsonPrintProduto = new JsonPrintProduto()
            {
                Empresa = empresaPrint,
                ListProduto = listProdutoPrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintProduto);
        }

        /// <summary>
        /// Cria o json de lista de clientes de uma empresa
        /// </summary>
        private string GetJsonListaClienteAsync(AuthenticatedUser _user, string idEmpresa)
        {
            AuthenticatedUser userNovo = AuthenticatedUser.NewInstance(_user);
            Empresa empresa = EmpresaRepository.getInstance().GetById(idEmpresa, true).Result; //pega a empresa
            EmpresaPrint empresaPrint = (EmpresaPrint)empresa;

            List<Cliente> listCliente = ClienteRepository.getInstance().GetAll(userNovo).Result;
            List<ClientePrint> listClientePrint = new List<ClientePrint>();

            if (listCliente != null && listCliente.Count > 0)
            {
                foreach (Cliente cliente in listCliente)
                {
                    listClientePrint.Add((ClientePrint)cliente);
                }
            }

            JsonPrintCliente jsonPrintCliente = new JsonPrintCliente()
            {
                Empresa = empresaPrint,
                ListCliente = listClientePrint
            };

            return new JavaScriptSerializer().Serialize(jsonPrintCliente);
        }

        //Função para verificar se foi informado endereço no registro (venda, nfe...) pois se foi deve imprimir este ao invés do cadastro do cliente
        private void VerificaEnderecoCliente(Cliente cliente, Venda venda, Nf nf)
        {
            //VENDA
            if (venda != null)
            {
                if (venda.InCidadeNfce == null || venda.InBairroNfce == null) return;  //se um destes está vazio, não informou endereço no registro e vai pegar o principal do cliente pra imprimir
                cliente.Enderecos = new List<Endereco>()  //porém se há endereço no registro, vai limpar os endereços do cliente e jogar apenas ele lá dentro
            {
                new Endereco()
                {
                    Logradouro = venda.LogradouroNfce,
                    Numero = venda.NumeroNfce,
                    Complemento = venda.ComplementoNfce,
                    PontoReferencia = venda.PontoReferenciaNfce,
                    Cep = venda.CepNfce,
                    IdBairro = venda.IdBairroNfce,
                    InBairro = venda.InBairroNfce,
                    IdCidade = venda.IdCidadeNfce,
                    InCidade = venda.InCidadeNfce,
                    Principal = true
                }
            };
            }
            //NFE
            else if (nf != null)
            {
                if (nf.InCidadeNfe == null || nf.InBairroNfe == null) return;  //se um destes está vazio, não informou endereço no registro e vai pegar o principal do cliente pra imprimir
                cliente.Enderecos = new List<Endereco>()  //porém se há endereço no registro, vai limpar os endereços do cliente e jogar apenas ele lá dentro
            {
                new Endereco()
                {
                    Logradouro = nf.LogradouroNfe,
                    Numero = nf.NumeroNfe,
                    Complemento = nf.ComplementoNfe,
                    Cep = nf.CepNfe,
                    IdBairro = nf.IdBairroNfe,
                    InBairro = nf.InBairroNfe,
                    IdCidade = nf.IdCidadeNfe,
                    InCidade = nf.InCidadeNfe,
                    Principal = true
                }
            };
            }
        }

        //Função para verificar se foi informado endereço no registro (venda, nfe...) pois se foi deve imprimir este ao invés do cadastro do fornecedor
        private void VerificaEnderecoFornecedor(Fornecedor Fornecedor, Nf nf)
        {
            if (nf.InCidadeNfe == null || nf.InBairroNfe == null) return;  //se um destes está vazio, não informou endereço no registro e vai pegar o principal do cliente pra imprimir
            Fornecedor.Enderecos = new List<Endereco>()  //porém se há endereço no registro, vai limpar os endereços do cliente e jogar apenas ele lá dentro
            {
                new Endereco()
                {
                    Logradouro = nf.LogradouroNfe,
                    Numero = nf.NumeroNfe,
                    Complemento = nf.ComplementoNfe,
                    Cep = nf.CepNfe,
                    IdBairro = nf.IdBairroNfe,
                    InBairro = nf.InBairroNfe,
                    IdCidade = nf.IdCidadeNfe,
                    InCidade = nf.InCidadeNfe,
                    Principal = true
                }
            };
        }

        #region ClassesJsonPrint
        /// <summary>
        /// Classe Json Carnê Pagamento
        /// </summary>
        private class JsonPrintCarnePagamento
        {
            public VendaPrint Venda { get; set; }
            public NfPrint Nfe { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<ContaReceberPrint> ContaReceber { get; set; }
        }

        /// <summary>
        /// Classe Json Cliente
        /// </summary>
        private class JsonPrintCliente
        {
            public EmpresaPrint Empresa { get; set; }
            public List<ClientePrint> ListCliente { get; set; }
        }

        /// <summary>
        /// Classe Json Compra
        /// </summary>
        private class JsonPrintCompra
        {
            public CompraPrint Compra { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public List<CompraItemPrint> CompraItem { get; set; }
            public List<CobrancaPrint> Cobranca { get; set; }
            public List<ContaPagarPrint> ContaPagar { get; set; }
        }

        private class JsonPrintComprovantePagamentoNfce
        {
            public ComprovantePagamentoNfcePrint ComprovantePagamento { get; set; }
            public CobrancaPrint Cobranca { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public EspeciePagamentoPrint EspeciePagamento { get; set; }
        }

        /// <summary>
        /// Classe Json Crédito
        /// </summary>
        private class JsonPrintCredito
        {
            public CreditoPrint Credito { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
        }

        /// <summary>
        /// Classe Json Cupom Troca
        /// </summary>
        private class JsonPrintCupomTroca
        {
            public VendaPrint Venda { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public DateTime DataImpressao { get; set; }
        }

        /// <summary>
        /// Classe Json Devolução
        /// </summary>
        private class JsonPrintDevolucao
        {
            public DevolucaoPrint Devolucao { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<DevolucaoItemPrint> DevolucaoItem { get; set; }
        }

        /// <summary>
        /// Classe Json Etiqueta
        /// </summary>
        private class JsonPrintEtiqueta
        {
            public List<EtiquetaItemPrint> EtiquetaItem { get; set; }
        }

        /// <summary>
        /// Classe Json MinutaDespacho
        /// </summary>
        private class JsonPrintMinutaDespacho
        {
            public List<MinutaDespachoPrint> ListMinutaDespacho { get; set; }
        }

        /// <summary>
        /// Classe Json MovimentacaoCaixa
        /// </summary>
        private class JsonPrintMovimentacaoCaixa
        {
            public EmpresaPrint Empresa { get; set; }
            public MovimentacaoCaixaPrint MovimentacaoCaixa { get; set; }
            public List<ValorFechamentoPrint> ValorFechamento { get; set; }
        }

        /// <summary>
        /// Classe Json MovimentacaoCaixa Detalhado
        /// </summary>
        private class JsonPrintMovimentacaoCaixaDetalhado
        {
            public EmpresaPrint Empresa { get; set; }
            public MovimentacaoCaixaPrint MovimentacaoCaixa { get; set; }
            public List<ValorFechamentoPrint> ValorFechamento { get; set; }
            public List<MovimentacaoCaixaEspeciePrint> MovAgrupadosPorTipoLancamento { get; set; }
            public List<VendaCobrancaEspeciePrint> VendaCobrancaAgrupadaEspeciePrint { get; set; }
            public double ValorTotalVendas { get; set; }
        }

        /// <summary>
        /// Classe Json Movimentacao Extra do Caixa (Suprimento/Sangria)
        /// </summary>
        private class JsonPrintMovimentacaoExtraCaixa
        {
            public EmpresaPrint Empresa { get; set; }
            public MovimentacaoCaixaPrint MovimentacaoCaixa { get; set; }
            public MovimentacaoCaixaItem MovimentacaoCaixaItem { get; set; }
        }

        /// <summary>
        /// Classe Json Contrato
        /// </summary>
        private class JsonPrintContrato
        {
            public ContratoPrint Contrato { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<ContratoItemPrint> ContratoItem { get; set; }
            public List<CobrancaPrint> Cobranca { get; set; }
            public List<ContaReceberPrint> ContaReceber { get; set; }
        }

        /// <summary>
        /// Classe Json MovimentacaoPontos
        /// </summary>
        private class JsonPrintMovimentacaoPontos
        {
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<MovimentacaoPontosPrint> ListMovimentacaoPontos { get; set; }
        }

        /// <summary>
        /// Classe Json Compra
        /// </summary>
        private class JsonPrintNfe
        {
            public NfPrint Nfe { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public DestinatarioPrint Destinatario { get; set; }
            public List<NfItemPrint> Itens { get; set; }
            public List<CobrancaPrint> Cobranca { get; set; }
            public List<ContaReceberPrint> ContaReceber { get; set; }
        }

        /// <summary>
        /// Classe Json Orçamento
        /// </summary>
        private class JsonPrintOrcamento
        {
            public OrcamentoPrint Orcamento { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public FuncionarioPrint Vendedor { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<OrcamentoItemPrint> OrcamentoItem { get; set; }
            public List<CobrancaPrint> Cobranca { get; set; }
            public List<ContaReceberPrint> ContaReceber { get; set; }
        }

        /// <summary>
        /// Classe Json Ordem de compra
        /// </summary>
        private class JsonPrintOrdemCompra
        {
            public OrdemCompraPrint OrdemCompra { get; set; }
            public ClientePrint Cliente { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public FuncionarioPrint Comprador { get; set; }
            public TerminalPrint Terminal { get; set; }
            public FornecedorPrint Tranportadora { get; set; }
            public List<OrdemCompraItemPrint> OrdemCompraItem { get; set; }
            public List<CobrancaPrint> Cobrancas { get; set; }
        }

        /// <summary>
        /// Classe Json Ordem Serviço
        /// </summary>
        private class JsonPrintOrdemProducao
        {
            public OrdemProducaoPrint OrdemProducao { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<OrdemProducaoItemPrint> OrdemProducaoItens { get; set; }
            public List<OrdemProducaoItemComponentePrint> OrdemProducaoComponentes { get; set; }
        }

        /// <summary>
        /// Classe Json Ordem Serviço
        /// </summary>
        private class JsonPrintOrdemServico
        {
            public OrdemServicoPrint OrdemServico { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public ClientePrint Cliente { get; set; }
            public EquipamentoPrint Equipamento { get; set; } // OS Equipamento
            public VeiculoPrint Veiculo { get; set; } // OS Autocenter
            public AnimalPrint Animal { get; set; } // OS Petshop
            public AnimalPrint InAnimal { get; set; } // OS Petshop

            public List<ProcedimentoPetShopPrint> ProcedimentoPetShop { get; set; } //os petshop
            public RevisaoVeiculoPrint RevisaoVeiculo { get; set; } // OS Autocenter
            public List<RevisaoVeiculoItemPrint> RevisaoVeiculoItem { get; set; } // OS Autocenter
            public ReceitaPrint Receita { get; set; } // OS Ótica
            public List<EquipamentoPrint> ListaEquipamentos { get; set; }
        }

        /// <summary>
        /// Classe Json Conta Receber inteira
        /// </summary>
        private class JsonPrintContaReceber
        {
            public ContaReceberPrint ContaReceber { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<PagamentoPrint> Pagamentos { get; set; }
            public string ValorTotalExtenso { get; set; }
            public int NumeroDePagamentos { get; set; }
            public double ValorSaldoTotalCliente { get; set; }
        }

        /// <summary>
        /// Classe Json Conta Receber inteira
        /// </summary>
        private class JsonPrintContaReceberCliente
        {
            public List<ContaReceberPrint> ListContaReceber { get; set; } //Para quando usar uma impressão com várias contas a receber
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public double ValorCres { get; set; }
            public double ValorPagoCres { get; set; }
            public double ValorAVencerTotal { get; set; }
            public double ValorVencidasTotal { get; set; }
            public double ValorJurosTotal { get; set; }
            public double ValorAbatimentoTotal { get; set; }
            public double ValorTotal { get; set; } //Total Geral
        }

        /// <summary>
        /// Classe Json Conta pagar inteira
        /// </summary>
        private class JsonPrintContaPagar
        {
            public ContaPagarPrint ContaPagar { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public string ValorTotalExtenso { get; set; }
            public List<PagamentoContaPagarPrint> Pagamentos { get; set; }
            public int NumeroDePagamentos { get; set; }

        }
        /// <summary>
        /// Classe Json Conta Receber
        /// </summary>
        private class JsonPrintReciboContaReceber
        {
            public ContaReceberPrint ContaReceber { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public ClientePrint Cliente { get; set; }
            public PagamentoPrint Pagamento { get; set; }
            public List<PagamentoPrint> Pagamentos { get; set; } //para impressao em lote dos pagamentos termicos
            public List<PagamentoPrint> PagamentosEspecie { get; set; } //para impressao em lote dos pagamentos separado por espécie
            public double ValorTotal { get; set; }
            public double ValorTotalPago { get; set; } //Valor total pago
            public double ValorSaldoTotal { get; set; }
            public double ValorSaldoAbertoTotal { get; set; } //Para impressão A4
            public string ValorTotalExtenso { get; set; }
            public double ValorSaldoTotalCliente { get; set; } //Saldo total de todas as contas a receber do cliente

        }
        /// <summary>
        /// Classe Json Conta Pagar
        /// </summary>
        private class JsonPrintReciboContaPagar
        {
            public ContaPagarPrint ContaPagar { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public TerminalPrint Terminal { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public string ValorTotalExtenso { get; set; }
            public PagamentoContaPagarPrint Pagamento { get; set; }

        }

        /// <summary>
        /// Classe Json Plano de Transporte
        /// </summary>
        private class JsonPrintPlanoTransporte
        {
            public PlanoTransportePrint PlanoTransporte { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public VeiculoPrint Veiculo { get; set; }
            public FornecedorPrint Transportadora { get; set; }
            public List<VendaRomaneioPrint> Vendas { get; set; } //lista de vendas com itens
            public List<VendaItemRomaneioPrint> ItensRomaneio { get; set; } //lista de itens do vendaItem das vendas agrupados
            public List<CobrancaRomaneioPrint> CobrancaTotal { get; set; }
        }

        /// <summary>
        /// Classe Json Servico Terceirizado
        /// </summary>
        private class JsonPrintServicoTerceirizado
        {
            public ServicoTerceirizadoPrint ServicoTerceirizado{ get; set; }
            public EmpresaPrint Empresa { get; set; }
            public FornecedorPrint Fornecedor { get; set; }
            public ClientePrint Cliente { get; set; }
            public FuncionarioPrint Funcionario { get; set; }
            public List<VeiculoPrint> Veiculos { get; set; }
            public List<EquipamentoPrint> Equipamentos { get; set; }
            public List<ServicoTerceirizadoProdutoItem> Produtos { get; set; }
            public List<ServicoTerceirizadServicoItem> Servicos { get; set; }
            public List<CobrancaPrint> Cobrancas { get; set; }
            public List<ContaPagarPrint> ContasPagar { get; set; }
        }

        /// <summary>
        /// Classe Json Venda
        /// </summary>
        private class JsonPrintTransferenciaEstoque
        {
            public TransferenciaEstoquePrint TransferenciaEstoque { get; set; }
            public EmpresaPrint EmpresaOrigem { get; set; }
            public EmpresaPrint EmpresaDestino { get; set; }

            public LocalizacaoEstoquePrint LocalizacaoEstoqueOrigem { get; set; }
            public LocalizacaoEstoquePrint LocalizacaoEstoqueDestino { get; set; }

            public List<TransferenciaEstoqueItemPrint> TransferenciaEstoqueItem { get; set; }

        }

        /// <summary>
        /// Classe Json Venda
        /// </summary>
        private class JsonPrintVenda
        {
            public VendaPrint Venda { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public List<VendaItemPrint> VendaItem { get; set; }
            public List<CobrancaPrint> Cobranca { get; set; }
            public List<ContaReceberPrint> ContaReceber { get; set; }
            public List<OrdemServicoPrint> OrdensServico { get; set; }
        }

        /// <summary>
        /// Classe Json Produto
        /// </summary>
        private class JsonPrintProduto
        {
            public EmpresaPrint Empresa { get; set; }
            public List<ProdutoPrint> ListProduto { get; set; }
        }
        #endregion

        #region ClassesPrint
        //CLIENTE USADO EM IMPRESSÕES
        private class ClientePrint
        {
            public string NomeRazaoSocial { get; set; }
            public string ApelidoNomeFantasia { get; set; }
            public string CpfCnpj { get; set; }
            public string RgIe { get; set; }
            public int Codigo { get; set; }
            public double PontosFidelidade { get; set; }
            public Endereco Endereco { get; set; }
            public Email Email { get; set; }
            public Telefone Telefone { get; set; }
            public double SaldoDevedor { get; set; }
            public List<Contato> Contatos { get; set; }

            //Usado na impressão térmica da venda, orçamento e contrato
            public string CpfOrCnpj { get; set; }

            public static explicit operator ClientePrint(Cliente obj)
            {
                if (obj == null) return null;
                return new ClientePrint()
                {
                    NomeRazaoSocial = obj.NomeRazaoSocial,
                    ApelidoNomeFantasia = obj.ApelidoNomeFantasia,
                    CpfCnpj = obj.CpfCnpj,
                    RgIe = obj.RgIe,
                    Codigo = obj.Codigo,
                    PontosFidelidade = obj.PontosFidelidade,
                    Endereco = obj.getEnderecoPrincipal(),
                    Telefone = obj.getTelefonePrincipal(),
                    Email = obj.getEmailPrincipal(),
                    CpfOrCnpj = obj.TipoPessoa == "JURÍDICA" ? "CNPJ" : "CPF",
                    SaldoDevedor = 0,
                    Contatos = obj.Contatos
                };
            }
        }

        //COBRANÇA USADA EM IMPRESSÕES
        private class CobrancaPrint
        {
            public string CondicaoPagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public string NumeroAutorizacao { get; set; }
            public double Valor { get; set; }

            public static explicit operator CobrancaPrint(Cobrancas obj)
            {
                if (obj == null) return null;
                return new CobrancaPrint()
                {
                    CondicaoPagamento = obj.InCondicaoPagamento == null ? null : obj.InCondicaoPagamento.Descricao,
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    NumeroAutorizacao = obj.NumeroAutorizacao,
                    Valor = obj.Valor,
                };
            }
        }

        //VENDA COBRANÇA AGRUPADO POR TIPO LANÇAMENTO USADA EM IMPRESSÕES
        private class VendaCobrancaEspeciePrint
        {
            public string EspeciePagamento { get; set; } //Descricao
            public double ValorTotal { get; set; } = 0.0;
            public List<VendaCobrancaPrint> Itens { get; set; } = new List<VendaCobrancaPrint>();
        }

        //VENDA COBRANÇA USADA EM IMPRESSÕES
        private class VendaCobrancaPrint
        {
            public string CodigoVenda { get; set; }
            public string SequencialVenda { get; set; }
            public string NomeCliente { get; set; }
            public string CondicaoPagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public string DataVencimento { get; set; }
            public string SequencialNfe { get; set; } //NF-e
            public double Valor { get; set; }
        }

        //COMPRA USADA EM IMPRESSÕES
        private class CompraPrint
        {
            public string CodigoCompra { get; set; }
            public int NumeroOrdemCompra { get; set; }
            public int Serie { get; set; }
            public int Sequencial { get; set; }
            public string Chave { get; set; }
            public string Status { get; set; }
            public string LocalizacaoEstoque { get; set; }

            public static explicit operator CompraPrint(Compra obj)
            {
                if (obj == null) return null;
                return new CompraPrint()
                {
                    CodigoCompra = obj.CodigoCompra,
                    NumeroOrdemCompra = obj.NumeroOrdemCompra,
                    Serie = obj.Serie,
                    Sequencial = obj.Sequencial,
                    Chave = obj.Chave,
                    Status = obj.Status,
                    LocalizacaoEstoque = obj.InLocalizacaoEstoque == null ? null : obj.InLocalizacaoEstoque.Descricao,
                };
            }
        }

        //COMPRA ITEM USADA EM IMPRESSÕES DE COMPRA
        private class CompraItemPrint
        {
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string ReferenciaFornecedor { get; set; }
            public string Descricao { get; set; }
            public double Quantidade { get; set; }
            public string UnidadeMedida { get; set; }
            public double ValorUnitarioCustoTotal { get; set; }
            public double ValorCustoTotal { get; set; }
            public string IdentificadorEstoque { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }

            public static explicit operator CompraItemPrint(CompraItem obj)
            {
                if (obj == null) return null;
                return new CompraItemPrint()
                {
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = obj.InProduto != null && obj.InProduto.CodigosBarras.Count > 0 ? obj.InProduto.CodigosBarras[0].Codigo : obj.EANTrib,
                    Descricao = obj.InProduto != null ? obj.InProduto.Descricao.Replace("\"", "''") : (!string.IsNullOrEmpty(obj.DescricaoProdVinculado) ? obj.DescricaoProdVinculado : obj.DescProduto), //Colocado replace por alguns itens terem aspas duplas na descrição e isso interfere no json
                    Quantidade = obj.QuantidadeFinal,
                    UnidadeMedida = obj.InUnidadeMedida != null ? obj.InUnidadeMedida.Descricao : obj.UnidadeTributavel,
                    ValorUnitarioCustoTotal = obj.ValorUnitarioCustoTotal,
                    ValorCustoTotal = obj.ValorCustoTotal,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(1, 1, 1),
                };
            }
        }

        //COMPROVANTE DE PAGAMENTO USADO EM IMPRESSÕES
        private class ComprovantePagamentoNfcePrint
        {
            public string Documento { get; set; }
            public DateTime DataPagamento { get; set; }
            public string Usuario { get; set; }
            public string Terminal { get; set; }
            public string TerminalSerialNumber { get; set; }
            public string CardBrand { get; set; }
            public string Holder { get; set; }
        }

        //CONTA PAGAR USADA EM IMPRESSÕES
        private class ContaPagarPrint
        {
            public string Documento { get; set; }
            public string Fatura { get; set; }
            public DateTime DataEmissao { get; set; }
            public DateTime DataVencimento { get; set; }
            public List<PagamentoContaPagar> Pagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public double Valor { get; set; }
            public double ValorJuros { get; set; }
            public double ValorAbatimento { get; set; }
            public double ValorPago { get; set; }
            public double ValorSaldo { get; set; }
            public string Status { get; set; }
            public string DadosExtras { get; set; }
            public string Codigo { get; set; }
            public static explicit operator ContaPagarPrint(ContaPagar obj)
            {
                if (obj == null) return null;
                return new ContaPagarPrint()
                {
                    Documento = obj.Documento,
                    Fatura = obj.Fatura,
                    DataEmissao = obj.DataEmissao.ToLocalTime(),
                    DataVencimento = obj.DataVencimento.ToLocalTime(),
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    Pagamento = obj.Pagamentos,
                    Valor = obj.Valor,
                    ValorJuros = obj.ValorJuros,
                    ValorAbatimento = obj.ValorAbatimento,
                    ValorPago = obj.ValorPago,
                    ValorSaldo = obj.ValorSaldo,
                    Status = obj.Status,
                    DadosExtras = obj.DadosExtras,
                };
            }
        }

        private class PagamentoPrint
        {
            public string Documento { get; set; }
            public DateTime DataHoraVencimentoDocumento { get; set; }
            public string CodigoPagamento { get; set; }
            public DateTime DataHoraPagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public double ValorJuros { get; set; }
            public double ValorAbatimento { get; set; }
            public double ValorPago { get; set; }
            public double ValorSaldoAberto { get; set; } //Conforme o VB
            public double ValorTotalSaldoAberto { get; set; } //Conforme o VB
            public double ValorTotalDocumento { get; set; }
            public double ValorPagoDocumento { get; set; }
            public double ValorSaldoDocumento { get; set; }
            public int TipoOperacao { get; set; }
            public string Codigo { get; set; }
            public string Observacao { get; set; }
            public InUsuario InUsuario { get; set; }
            public InEspeciePagamento InEspeciePagamento { get; set; }


            public static explicit operator PagamentoPrint(PagamentoContaReceber obj)
            {
                if (obj == null) return null;
                return new PagamentoPrint()
                {
                    CodigoPagamento = obj.CodigoPagamento,
                    DataHoraPagamento = obj.DataHoraPagamento.ToLocalTime(),
                    ValorJuros = obj.ValorJuros,
                    ValorAbatimento = obj.ValorAbatimento,
                    Codigo = obj.CodigoPagamento,
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    ValorPago = obj.ValorPago,
                    TipoOperacao = obj.TipoOperacao,
                    Observacao = obj.Observacao,
                    InUsuario = obj.InUsuario,
                    InEspeciePagamento = obj.InEspeciePagamento,
                };
            }
        }

        private class PagamentoContaPagarPrint
        {
            public string CodigoPagamento { get; set; }
            public DateTime DataHoraPagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public double ValorJuros { get; set; }
            public double ValorAbatimento { get; set; }
            public double ValorPago { get; set; }
            public int TipoOperacao { get; set; }
            public InUsuario InUsuario { get; set; }
            public InEspeciePagamento InEspeciePagamento { get; set; }
            public string Codigo { get; set; }

            public static explicit operator PagamentoContaPagarPrint(PagamentoContaPagar obj)
            {
                if (obj == null) return null;
                return new PagamentoContaPagarPrint()
                {
                    CodigoPagamento = obj.CodigoPagamento,
                    DataHoraPagamento = obj.DataHoraPagamento.ToLocalTime(),
                    ValorAbatimento = obj.ValorAbatimento,
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    ValorPago = obj.ValorPago,
                    TipoOperacao = obj.TipoOperacao,
                    InUsuario = obj.InUsuario,
                    InEspeciePagamento = obj.InEspeciePagamento,
                    Codigo = obj.CodigoPagamento,
                };
            }
        }
        private class ContaReceberPrint
        {
            public string Documento { get; set; }
            public string Fatura { get; set; }
            public DateTime DataEmissao { get; set; }
            public DateTime DataVencimento { get; set; }
            public string EspeciePagamento { get; set; }
            public double Valor { get; set; }
            public double ValorJuros { get; set; }
            public double ValorAbatimento { get; set; }
            public double ValorPago { get; set; }
            public double ValorSaldo { get; set; } //Aqui considera os juros e desconto
            public double ValorAberto { get; set; } //Total em aberto, mas sem juros ou desconto
            public string Status { get; set; }
            public string DadosExtras { get; set; }
            public InCliente InCliente { get; set; }
            public InEspeciePagamento InEspeciePagamento { get; set; }

            public static explicit operator ContaReceberPrint(ContaReceber obj)
            {
                if (obj == null) return null;
                return new ContaReceberPrint()
                {
                    Documento = obj.Documento,
                    Fatura = obj.Fatura,
                    DataEmissao = obj.DataEmissao.ToLocalTime(),
                    DataVencimento = obj.DataVencimento.ToLocalTime(),
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    Valor = obj.Valor,
                    ValorJuros = obj.ValorJuros,
                    ValorAbatimento = obj.ValorAbatimento,
                    ValorPago = obj.ValorPago,
                    ValorSaldo = obj.ValorSaldo,
                    ValorAberto = obj.Valor - obj.ValorJuros + obj.ValorAbatimento,
                    Status = obj.Status,
                    DadosExtras = obj.DadosExtras,
                    InCliente = obj.InCliente,
                    InEspeciePagamento = obj.InEspeciePagamento,
                };
            }
        }

        //CRÉDITO USADO EM IMPRESSÕES
        private class CreditoPrint
        {
            public DateTime DataHoraCredito { get; set; }
            public string Descricao { get; set; }
            public string CodigoCredito { get; set; }
            public double Valor { get; set; }
            public bool Utilizado { get; set; }
            public string Funcionario { get; set; }
            public string Usuario { get; set; }

            public static explicit operator CreditoPrint(Credito obj)
            {
                if (obj == null) return null;
                return new CreditoPrint()
                {
                    DataHoraCredito = obj.DataHora.ToLocalTime(),
                    Descricao = obj.Descricao,
                    CodigoCredito = obj.CodigoCredito,
                    Valor = obj.Valor,
                    Utilizado = obj.Utilizado,
                    Funcionario = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                };
            }
        }

        //DEVOLUÇÃO USADA EM IMPRESSÕES
        private class DevolucaoPrint
        {
            public DateTime DataHoraDevolucao { get; set; }
            public string CodigoDevolucao { get; set; }
            public int CodigoTipoDevolucao { get; set; }
            public string TipoDevolucao { get; set; }
            public int CodigoTipoNegociacao { get; set; }
            public string TipoNegociacao { get; set; }
            public string EspeciePagamento { get; set; }
            public double ValorTotal { get; set; }
            public string CodigoVenda { get; set; }
            public string Terminal { get; set; }
            public string Funcionario { get; set; }
            public string Usuario { get; set; }

            public static explicit operator DevolucaoPrint(Devolucao obj)
            {
                if (obj == null) return null;
                return new DevolucaoPrint()
                {
                    DataHoraDevolucao = obj.DataHora.ToLocalTime(),
                    CodigoDevolucao = obj.CodigoDevolucao,
                    CodigoTipoDevolucao = obj.TipoDevolucao,
                    TipoDevolucao = obj.TipoDevolucao == 1 ? "DEVOLUÇÃO DE VENDA REALIZADA" : "DEVOLUÇÃO DE VENDA CONSIGNADA",
                    CodigoTipoNegociacao = obj.TipoDevolucaoFinanceira,
                    TipoNegociacao = obj.TipoDevolucao == 1 ? (obj.TipoDevolucaoFinanceira == 1 ? "DEVOLUÇÃO EM CUPOM DE CRÉDITO" : "DEVOLUÇÃO EM ESPÉCIE DE PAGAMENTO") : string.Empty,
                    EspeciePagamento = obj.InEspeciePagamento == null ? null : obj.InEspeciePagamento.Descricao,
                    ValorTotal = obj.ValorTotal,
                    CodigoVenda = obj.CodigoVenda,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Funcionario = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                };
            }
        }

        //DEVOLUÇÃO ITEM USADO EM IMPRESSÕES
        private class DevolucaoItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string UnidadeMedida { get; set; }
            public double Quantidade { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorTotal { get; set; }

            public static explicit operator DevolucaoItemPrint(DevolucaoItem obj)
            {
                if (obj == null) return null;
                return new DevolucaoItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Quantidade = obj.Quantidade,
                    ValorUnitario = obj.ValorUnitario,
                    ValorTotal = obj.ValorTotal,
                };
            }
        }

        //EMPRESA USADA EM IMPRESSÕES
        private class EmpresaPrint
        {
            public string Imagem { get; set; }
            public string RazaoSocial { get; set; }
            public string NomeFantasia { get; set; }
            public string Cnpj { get; set; }
            public string InscricaoEstadual { get; set; }
            public int CRT { get; set; }
            public string TextoCupomTroca { get; set; }
            public Endereco Endereco { get; set; }
            public Email Email { get; set; }
            public Telefone Telefone { get; set; }

            public static explicit operator EmpresaPrint(Empresa obj)
            {
                if (obj == null) return null;
                return new EmpresaPrint()
                {
                    RazaoSocial = obj.RazaoSocial,
                    NomeFantasia = obj.NomeFantasia == null ? "Não Informado" : obj.NomeFantasia,
                    Cnpj = obj.Cnpj == null ? "Não Informado" : obj.Cnpj,
                    InscricaoEstadual = obj.InscricaoEstadual,
                    CRT = obj.CRT,
                    TextoCupomTroca = obj.TextoCupomTroca,
                    Endereco = obj.getEnderecoPrincipal(),
                    Telefone = obj.getTelefonePrincipal(),
                    Email = obj.getEmailPrincipal(),
                };
            }
        }

        //EQUIPAMENTO USADO EM IMPRESSÕES
        private class EquipamentoPrint
        {
            public string Descricao { get; set; }
            public string NumeroSerie { get; set; }
            public string Marca { get; set; }
            public string Modelo { get; set; }
            public string Patrimonio { get; set; }
            public string DadosExtras { get; set; }

            public static explicit operator EquipamentoPrint(Equipamento obj)
            {
                if (obj == null) return null;
                return new EquipamentoPrint()
                {
                    Descricao = obj.Descricao,
                    NumeroSerie = obj.NumeroSerie,
                    Marca = obj.Marca,
                    Modelo = obj.Modelo,
                    Patrimonio = obj.Patrimonio,
                    DadosExtras = obj.DadosExtras,
                };
            }
        }

        //ETIQUETA ITEM USADO EM IMPRESSÕES
        private class EtiquetaItemPrint
        {
            public bool NaoImprimir { get; set; }
            public string Descricao { get; set; }
            public string IdentificadorBarras { get; set; }
            public string TituloIdentificadorTexto { get; set; }
            public string IdentificadorTexto { get; set; }
            public string Grupo { get; set; }
            public string Subgrupo { get; set; }
            public string Marca { get; set; }
            public string TituloPrecoA { get; set; }
            public string ValorUnitarioA { get; set; }
            public string TituloPrecoB { get; set; }
            public string ValorUnitarioB { get; set; }
            public string UnidadeMedida { get; set; }
            public string QuantidadeAtacado { get; set; }
            public string CodigoInterno { get; set; }
            public string ImagemProduto { get; set; }
            public string Tamanho { get; set; }
            public string DescricaoAdicional { get; set; }
            public string DadosAdicionais { get; set; }
        }

        //LOCALIZACAO ESTOQUE USADO EM IMPRESSÕES
        private class LocalizacaoEstoquePrint
        {
            public string Descricao { get; set; }


            public static explicit operator LocalizacaoEstoquePrint(LocalizacaoEstoque obj)
            {
                if (obj == null) return null;
                return new LocalizacaoEstoquePrint()
                {
                    Descricao = obj.Descricao,
                };
            }
        }

        //FORNECEDOR USADO EM IMPRESSÕES
        private class FornecedorPrint
        {
            public int Codigo { get; set; }
            public string NomeRazaoSocial { get; set; }
            public string ApelidoNomeFantasia { get; set; }
            public string CpfCnpj { get; set; }
            public string RgIe { get; set; }
            public Endereco Endereco { get; set; }
            public Email Email { get; set; }
            public Telefone Telefone { get; set; }

            public static explicit operator FornecedorPrint(Fornecedor obj)
            {
                if (obj == null) return null;
                return new FornecedorPrint()
                {
                    Codigo = obj.Codigo,
                    NomeRazaoSocial = obj.NomeRazaoSocial,
                    ApelidoNomeFantasia = obj.ApelidoNomeFantasia == null ? "Não Informado" : obj.ApelidoNomeFantasia,
                    CpfCnpj = obj.CpfCnpj == null ? "Não Informado" : obj.CpfCnpj,
                    RgIe = obj.RgIe,
                    Endereco = obj.getEnderecoPrincipal(),
                    Telefone = obj.getTelefonePrincipal(),
                    Email = obj.getEmailPrincipal(),
                };
            }
        }

        //FUNCIONARIO USADO EM IMPRESSÕES
        private class FuncionarioPrint
        {
            public string Nome { get; set; }
            public string Cpf { get; set; }
            public string Rg { get; set; }
            public Endereco Endereco { get; set; }
            public Email Email { get; set; }
            public Telefone Telefone { get; set; }

            public static explicit operator FuncionarioPrint(Funcionario obj)
            {
                if (obj == null) return null;
                return new FuncionarioPrint()
                {
                    Nome = obj.Nome,
                    Cpf = obj.Cpf == null ? "Não Informado" : obj.Cpf,
                    Rg = obj.Rg == null ? "Não Informado" : obj.Rg,
                    Endereco = obj.getEnderecoPrincipal(),
                    Telefone = obj.getTelefonePrincipal(),
                    Email = obj.getEmailPrincipal(),
                };
            }
        }

        //MINUTA DE DESPACHO
        private class MinutaDespachoPrint
        {
            public string SequencialNfe { get; set; }
            public string SerieNfe { get; set; }
            public string DataHora { get; set; }
            public string DataHoraEmissao { get; set; }
            public string DataHoraEntradaOuSaida { get; set; }
            public string TipoDestinatario { get; set; }
            public string ModalidadeFrete { get; set; }
            public int NumVolumeMinuta { get; set; }
            public int QtdVolumeTotal { get; set; }
            public string EspecieVolume { get; set; }
            public string MarcaVolume { get; set; }
            public string NumeracaoVolume { get; set; }
            public double PesoLiquidoVolume { get; set; }
            public double PesoBrutoVolume { get; set; }
            public EmpresaPrint Empresa { get; set; }
            public ClientePrint Cliente { get; set; }
            public FornecedorPrint Transportadora { get; set; }
            public VeiculoPrint Veiculo { get; set; }
            public Venda venda { get; set; }
            public double ValorNf { get; set; }

            public static explicit operator MinutaDespachoPrint(Nf obj)
            {
                if (obj == null) return null;

                return new MinutaDespachoPrint()
                {
                    SequencialNfe = obj.Sequencial.ToString(),
                    SerieNfe = obj.Serie.ToString(),
                    DataHora = obj.DataHora.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss"),
                    DataHoraEmissao = obj.DataHoraEmissao.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss"),
                    DataHoraEntradaOuSaida = obj.DataHoraEntradaOuSaida != null ? obj.DataHoraEntradaOuSaida?.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss") : "",
                    TipoDestinatario = obj.TipoDestinatario,
                    ModalidadeFrete = obj.TipoDestinatario,
                    QtdVolumeTotal = (int)obj.QuantidadeVolume,
                    EspecieVolume = obj.EspecieVolume,
                    MarcaVolume = obj.MarcaVolume,
                    NumeracaoVolume = obj.NumeracaoVolume,
                    PesoLiquidoVolume = obj.PesoBrutoVolume,
                    PesoBrutoVolume = obj.PesoBrutoVolume,
                    ValorNf = obj.ValorTotalNf
                };
            }
        }

        //MOVIMENTAÇÃO CAIXA USADA EM IMPRESSÕES
        private class MovimentacaoCaixaPrint
        {
            public string DescricaoCaixa { get; set; }
            public string Status { get; set; }
            public string UsuarioAbertura { get; set; }
            public string UsuarioFechamento { get; set; }
            public DateTime DataHoraAbertura { get; set; }
            //public DateTime DataHoraFechamento { get; set; }
            public string DataHoraFechamento { get; set; }
            public double ValorTotal { get; set; }
            public double ValorTotalApurado { get; set; }
            public double ValorTotalEntradas { get; set; }
            public double ValorTotalSaidas { get; set; }

            public static explicit operator MovimentacaoCaixaPrint(MovimentacaoCaixa obj)
            {
                if (obj == null) return null;

                var dataFechamento = obj.DataHoraFechamento.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss");

                return new MovimentacaoCaixaPrint()
                {
                    DescricaoCaixa = !string.IsNullOrEmpty(obj.InCaixa?.Descricao) ? obj.InCaixa?.Descricao : "NÃO INFORMADO",
                    Status = obj.Status,
                    UsuarioAbertura = !string.IsNullOrEmpty(obj.InUsuarioAbertura?.Nome) ? obj.InUsuarioAbertura?.Nome : "NÃO INFORMADO",
                    UsuarioFechamento = !string.IsNullOrEmpty(obj.InUsuarioFechamento?.Nome) ? obj.InUsuarioFechamento?.Nome : "NÃO INFORMADO",
                    DataHoraAbertura = obj.DataHoraAbertura.ToLocalTime(),
                    //DataHoraFechamento = obj.DataHoraFechamento.ToLocalTime(),
                    DataHoraFechamento = dataFechamento == "01/01/0001 00:00:00" ? "" : dataFechamento,
                };
            }
        }

        //MOVIMENTAÇÃO PONTOS FIDELIDADE USADA EM IMPRESSÕES
        private class MovimentacaoPontosPrint
        {
            public string CodigoVenda { get; set; }
            public string Funcionario { get; set; }
            public string Descricao { get; set; }
            public double Pontos { get; set; }
            public string Status { get; set; }
            public DateTime DataMovimentacao { get; set; }
            public DateTime DataValidadePontos { get; set; }


            public static explicit operator MovimentacaoPontosPrint(MovimentacaoPontos obj)
            {
                if (obj == null) return null;
                return new MovimentacaoPontosPrint()
                {
                    CodigoVenda = obj.CodigoVenda,
                    Funcionario = obj.InFuncionario.Nome,
                    Descricao = obj.Descricao,
                    Pontos = Math.Round(obj.Pontos, 2, MidpointRounding.AwayFromZero),
                    Status = obj.Status,
                    DataMovimentacao = obj.DataMovimentacao.ToLocalTime(),

                };
            }
        }

        //MOVIMENTAÇÃO ITENS DO CAIXA AGRUPADO POR TIPO LANÇAMENTO USADA EM IMPRESSÕES
        private class MovimentacaoCaixaEspeciePrint
        {
            public string TipoLancamento { get; set; }
            public List<MovimentacaoCaixaItem> Itens { get; set; } = new List<MovimentacaoCaixaItem>();
        }

        //VALOR FECHAMENTO USADO EM IMPRESSÕES
        private class ValorFechamentoPrint
        {
            public string TipoLancamento { get; set; }
            public double Valor { get; set; }
            public double ValorApurado { get; set; }
            public double ValorEntradas { get; set; }
            public double ValorSaidas { get; set; }

            public static explicit operator ValorFechamentoPrint(ValorFechamento obj)
            {
                if (obj == null) return null;
                return new ValorFechamentoPrint()
                {
                    TipoLancamento = obj.TipoLancamento == "01" ? "Dinheiro" :
                                     obj.TipoLancamento == "02" ? "Cheque" :
                                     obj.TipoLancamento == "03" ? "Cartão de crédito" :
                                     obj.TipoLancamento == "04" ? "Cartão de débito" :
                                     obj.TipoLancamento == "05" ? "Cupom de crédito" :
                                     obj.TipoLancamento == "10" ? "Vale alimentação" :
                                     obj.TipoLancamento == "11" ? "Vale refeição" :
                                     obj.TipoLancamento == "12" ? "Vale presente" :
                                     obj.TipoLancamento == "13" ? "Vale combustível" :
                                     obj.TipoLancamento == "15" ? "Boleto bancário" :
                                     obj.TipoLancamento == "16" ? "Depósito" :
                                     obj.TipoLancamento == "17" ? "Pagamento instantâneo (Pix)" :
                                     obj.TipoLancamento == "18" ? "Transferência bancária" :
                                     obj.TipoLancamento == "19" ? "Programa de fidelidade" :
                                     "Outros",
                    Valor = obj.Valor,
                    ValorApurado = obj.ValorApurado,
                };
            }
        }

        //NFE USADA EM IMPRESSÕES
        private class NfPrint
        {
            public DateTime DataHoraNfe { get; set; }
            public double ValorProdutos { get; set; }
            public double ValorFrete { get; set; }
            public double ValorSeguro { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorTotal { get; set; }
            public string DadosAdicionais { get; set; }
            public string CodigoNfe { get; set; }
            public string Terminal { get; set; }
            public string Vendedor { get; set; }
            public string Usuario { get; set; }
            public string Status { get; set; }

            public static explicit operator NfPrint(Nf obj)
            {
                if (obj == null) return null;
                return new NfPrint()
                {
                    DataHoraNfe = obj.DataHora.ToLocalTime(),
                    ValorProdutos = obj.ValorTotalProdutos,
                    ValorFrete = obj.ValorFrete,
                    ValorSeguro = obj.ValorSeguro,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorDesconto = obj.ValorDesconto,
                    ValorTotal = obj.ValorTotalNf,
                    DadosAdicionais = obj.DadosAdicionais,
                    CodigoNfe = obj.CodigoNfe,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Vendedor = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                    Status = obj.Status,
                };
            }
        }

        //COMPRA ITEM USADA EM IMPRESSÕES DE COMPRA
        private class NfItemPrint
        {
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string Descricao { get; set; }
            public double Quantidade { get; set; }
            public string UnidadeMedida { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorTotal { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }

            public static explicit operator NfItemPrint(NfItem obj)
            {
                if (obj == null) return null;
                return new NfItemPrint()
                {
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = obj.InProduto != null && obj.InProduto.CodigosBarras.Count > 0 ? obj.InProduto.CodigosBarras[0].Codigo : obj.CodigoEanTributado,
                    Descricao = !string.IsNullOrEmpty(obj.DescricaoProdutoAlterada) ? obj.DescricaoProdutoAlterada : (obj.InProduto != null ? obj.InProduto.Descricao.Replace("\"", "''") : ""),
                    Quantidade = obj.Quantidade,
                    UnidadeMedida = obj.InUnidadeMedida != null ? obj.InUnidadeMedida.Descricao : obj.UnidadeMedida,
                    ValorUnitario = obj.ValorUnitario,
                    ValorTotal = obj.ValorTotalItem,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(1, 1, 1),
                };
            }
        }

        //CONTRATO USADO EM IMPRESSÕES
        private class ContratoPrint
        {
            public string Descricao { get; set; }
            public DateTime DataEmissao { get; set; }
            public string DataInicial { get; set; }
            public string DataFinal { get; set; }
            public string Status { get; set; }
            public string Intervalo { get; set; }
            public string DiaProcessamento { get; set; }
            public string DiaVencimento { get; set; }
            public string DataUltimaVendaGerada { get; set; }
            public int NumeroDeVendasGeradas { get; set; }
            public double ValorProdutos { get; set; }
            public double ValorServicos { get; set; }
            public double ValorFrete { get; set; }
            public double ValorSeguro { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorTotal { get; set; }
            public string DadosAdicionais { get; set; }
            public string CodigoContrato { get; set; }
            public string Terminal { get; set; }
            public string Vendedor { get; set; }
            public string Usuario { get; set; }
            public int Sequencial { get; set; }
            public double QtdeItens { get; set; }

            public static explicit operator ContratoPrint(Contrato obj)
            {
                if (obj == null) return null;
                dynamic dataFinal;
                dynamic dataUltimaVendaGerada;
                if (obj.DataFinal != null)
                    dataFinal = Convert.ToDateTime(obj.DataFinal).ToLocalTime().ToString("dd/MM/yyyy");
                else
                    dataFinal = "Indeterminada";

                if (obj.DataUltimaVendaGerada != null)
                    dataUltimaVendaGerada = Convert.ToDateTime(obj.DataUltimaVendaGerada).ToLocalTime().ToString("dd/MM/yyyy");
                else
                    dataUltimaVendaGerada = "Não gerou Vendas";

                return new ContratoPrint()
                {
                    Descricao = obj.Descricao,
                    DataEmissao = obj.DataEmissao.ToLocalTime(),
                    DataInicial = obj.DataInicial.ToLocalTime().ToString("dd/MM/yyyy"),
                    DataFinal = dataFinal,
                    Status = obj.Status,
                    Intervalo = obj.Intervalo,
                    DiaProcessamento = obj.Intervalo == "MENSAL" ? obj.DiaProcessamentoMensal.ToString()
                    : obj.Intervalo == "QUINZENAL" ? obj.DiaProcessamentoQuinzenal.ToString()
                    : obj.Intervalo == "SEMANAL" ? obj.DiaProcessamentoSemanal : "",
                    DiaVencimento = obj.Intervalo == "MENSAL" ? obj.DiaVencimentoMensal.ToString()
                    : obj.Intervalo == "QUINZENAL" ? obj.DiaVencimentoQuinzenal.ToString()
                    : obj.Intervalo == "SEMANAL" ? obj.DiaVencimentoSemanal : "",
                    DataUltimaVendaGerada = dataUltimaVendaGerada,
                    NumeroDeVendasGeradas = obj.NumeroDeVendasGeradas,
                    ValorProdutos = obj.ValorProdutos,
                    ValorServicos = obj.ValorServicos,
                    ValorFrete = obj.ValorFrete,
                    ValorSeguro = obj.ValorSeguro,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorDesconto = obj.ValorDesconto,
                    ValorTotal = obj.ValorTotal,
                    DadosAdicionais = obj.DadosAdicionais,
                    CodigoContrato = obj.CodigoContrato,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Vendedor = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                    Sequencial = obj.Sequencial,
                    QtdeItens = obj.QtdeTotalItens
                };
            }
        }

        //ORÇAMENTO USADO EM IMPRESSÕES
        private class OrcamentoPrint
        {
            public DateTime DataHoraOrcamento { get; set; }
            public DateTime DataHoraPrevisaoEntrega { get; set; }
            public DateTime? DataHoraValidade { get; set; }
            public string Status { get; set; }
            public double ValorProdutos { get; set; }
            public double ValorServicos { get; set; }
            public double ValorIpi { get; set; }
            public double ValorFrete { get; set; }
            public double ValorSeguro { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorTotal { get; set; }
            public string DadosAdicionais { get; set; }
            public string CodigoOrcamento { get; set; }
            public string TituloOrcamento { get; set; }
            public string Terminal { get; set; }
            public string Vendedor { get; set; }
            public string Usuario { get; set; }
            public int Sequencial { get; set; }
            public double QtdeItens { get; set; }
            public string TipoFrete { get; set; }
            public string ModalidadeTipoFrete { get; set; }
            public string LogradouroEntrega { get; set; }
            public string NumeroEntrega { get; set; }
            public string ComplementoEntrega { get; set; }
            public string PontoReferenciaEntrega { get; set; }
            public string CepEntrega { get; set; }
            public string ObservacaoEntrega { get; set; }
            public InBairro InBairroEntrega { get; set; }
            public InCidade InCidadeEntrega { get; set; }
            public InVeiculo Veiculo { get; set; }
            public double KmVeiculo { get; set; }
            public InEquipamento Equipamento { get; set; }

            public static explicit operator OrcamentoPrint(Orcamento obj)
            {
                if (obj == null) return null;
                return new OrcamentoPrint()
                {
                    DataHoraOrcamento = obj.DataHoraOrcamento.ToLocalTime(),
                    DataHoraPrevisaoEntrega = obj.DataHoraPrevisaoEntrega.ToLocalTime(),
                    Status = obj.Status,
                    ValorProdutos = obj.ValorProdutos,
                    ValorServicos = obj.ValorServicos,
                    ValorIpi = obj.ValorIpi,
                    ValorFrete = obj.ValorFrete,
                    ValorSeguro = obj.ValorSeguro,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorDesconto = obj.ValorDesconto,
                    ValorTotal = obj.ValorTotal,
                    DadosAdicionais = obj.DadosAdicionais,
                    CodigoOrcamento = obj.CodigoOrcamento,
                    TituloOrcamento = obj.Titulo,
                    ObservacaoEntrega = obj.ObservacaoEntrega,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Vendedor = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                    Sequencial = obj.Sequencial,
                    QtdeItens = obj.QtdeTotalItens,
                    LogradouroEntrega = obj.LogradouroEntrega,
                    NumeroEntrega = obj.NumeroEntrega,
                    ComplementoEntrega = obj.ComplementoEntrega,
                    PontoReferenciaEntrega = obj.PontoReferenciaEntrega,
                    CepEntrega = obj.CepEntrega,
                    InBairroEntrega = obj.InBairroEntrega,
                    InCidadeEntrega = obj.InCidadeEntrega,
                    Veiculo = obj.InVeiculo,
                    KmVeiculo = obj.KmVeiculo,
                    Equipamento = obj.InEquipamento,
                    DataHoraValidade = obj.DataHoraValidade.HasValue ? obj.DataHoraValidade.Value.ToLocalTime() : null,
                };
            }
        }

        //CONTRATO ITEM USADO EM IMPRESSÕES
        private class ContratoItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string UnidadeMedida { get; set; }
            public double Quantidade { get; set; }
            public double QuantidadeM3 { get; set; }
            public string DadosAdicionais { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorOriginal { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorDescontoItem { get; set; }
            public double PercentualDescontoItem { get; set; }
            public double ValorTotal { get; set; }
            public double ValorTotalItem { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }

            public static explicit operator ContratoItemPrint(ContratoItem obj)
            {
                if (obj == null) return null;
                return new ContratoItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Quantidade = obj.Quantidade,
                    QuantidadeM3 = obj.QuantidadeM3,
                    DadosAdicionais = obj.DadosAdicionais,
                    ValorUnitario = obj.ValorUnitario,
                    ValorOriginal = obj.ValorOriginal,
                    ValorDesconto = obj.ValorDesconto,
                    ValorDescontoItem = obj.ValorDescontoItem,
                    PercentualDescontoItem = obj.PercentualDescontoItem,
                    ValorTotal = obj.ValorTotal,
                    ValorTotalItem = obj.ValorTotalItem,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(1, 1, 1),
                };
            }
        }

        //ESPÉCIE DE PAGAMENTO USADO EM IMPRESSÕES
        private class EspeciePagamentoPrint
        {
            public string Descricao { get; set; }
            public string Bandeira { get; set; }
            public string CnpjCredenciadora { get; set; }
            public string TipoLancamento { get; set; }

            public static explicit operator EspeciePagamentoPrint(EspeciePagamento obj)
            {
                if (obj == null) return null;
                return new EspeciePagamentoPrint()
                {
                    Descricao = obj.Descricao,
                    CnpjCredenciadora = obj.CnpjCredenciadora,
                    Bandeira = obj.Bandeira == "01" ? "Visa" :
                               obj.Bandeira == "02" ? "Mastercard" :
                               obj.Bandeira == "03" ? "American Express" :
                               obj.Bandeira == "04" ? "Sorocred" :
                               obj.Bandeira == "05" ? "Diners Club" :
                               obj.Bandeira == "06" ? "Elo" :
                               obj.Bandeira == "07" ? "Hipercard" :
                               obj.Bandeira == "08" ? "Aura" :
                               obj.Bandeira == "09" ? "Cabal" :
                               "Outros",
                    TipoLancamento = obj.TipoLancamento == "01" ? "Dinheiro" :
                                     obj.TipoLancamento == "02" ? "Cheque" :
                                     obj.TipoLancamento == "03" ? "Cartão de crédito" :
                                     obj.TipoLancamento == "04" ? "Cartão de débito" :
                                     obj.TipoLancamento == "05" ? "Cupom de crédito" :
                                     obj.TipoLancamento == "10" ? "Vale alimentação" :
                                     obj.TipoLancamento == "11" ? "Vale refeição" :
                                     obj.TipoLancamento == "12" ? "Vale presente" :
                                     obj.TipoLancamento == "13" ? "Vale combustível" :
                                     obj.TipoLancamento == "15" ? "Boleto bancário" :
                                     obj.TipoLancamento == "16" ? "Depósito" :
                                     obj.TipoLancamento == "17" ? "Pagamento instantâneo (Pix)" :
                                     obj.TipoLancamento == "18" ? "Transferência bancária" :
                                     obj.TipoLancamento == "19" ? "Programa de fidelidade" :
                                     "Outros",
                };
            }
        }

        //ORÇAMENTO ITEM USADO EM IMPRESSÕES
        private class OrcamentoItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string DescricaoAdicional { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string UnidadeMedida { get; set; }
            public double Quantidade { get; set; }
            public double QuantidadeM3 { get; set; }
            public string DadosAdicionais { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorOriginal { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorDescontoItem { get; set; }
            public double PercentualDescontoItem { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorOutrasDespesasItem { get; set; }
            public double PercentualOutrasDespesasItem { get; set; }
            public double ValorIpi { get; set; }
            public double ValorTotal { get; set; }
            public double ValorTotalItem { get; set; }
            public string Ncm { get; set; }
            public List<VendaComponenteItem> Componentes { get; set; }
            public string ImagemItem { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }
            public string Servico { get; set; }
            public string Grupo { get; set; }
            public double ValorIcms { get; set; }
            public double ValorIcmsSt { get; set; }
            public string IdentificadorEstoque { get; set; }
            public string Referencia { get; set; }

            public static explicit operator OrcamentoItemPrint(OrcamentoItem obj)
            {
                if (obj == null) return null;

                // Pega Imagem Miniatura do produto
                ProdutoImagem imagem = null;
                if (!string.IsNullOrEmpty(obj.IdProduto))
                {
                   imagem = ProdutoImagemRepository.getInstance().GetTumbnailPrincipalByIdProduto(obj.IdProduto).Result;
                }

                var percentualDescontoItem = Math.Round((obj.ValorDescontoItem / obj.Quantidade) / obj.ValorUnitario * 100, 2, MidpointRounding.AwayFromZero); 
                var percentualOutrasDespesasItem = Math.Round((obj.ValorOutrasDespesasItem / obj.Quantidade) / obj.ValorUnitario * 100, 2, MidpointRounding.AwayFromZero);
                //var valorUnitarioComDesconto = Math.Round(obj.ValorUnitario * (1 - (percentualDescontoItem / 100)), 2, MidpointRounding.AwayFromZero);
                var valorTotalComDesconto = Math.Round(obj.ValorTotalItem * (1 - (percentualDescontoItem / 100)), 2, MidpointRounding.AwayFromZero);

                var componentes = obj.Componentes != null && obj.Componentes.Count > 0 ? obj.Componentes : new List<VendaComponenteItem>();
                if (componentes.Count == 0) componentes.Add(new VendaComponenteItem() { Descricao = "SEM COMPONENTES" });

                foreach (var componente in obj.Componentes)
                {
                    if (string.IsNullOrEmpty(componente.CodigoProduto))
                    {
                        var produto = ProdutoRepository.getInstance().GetById(componente.IdProduto, true).Result;
                        componente.CodigoProduto = produto != null ? produto.Codigo : "";
                    }
                }

                return new OrcamentoItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Quantidade = obj.Quantidade,
                    QuantidadeM3 = obj.QuantidadeM3,
                    DadosAdicionais = obj.DadosAdicionais,
                    ValorUnitario = obj.ValorUnitario,
                    ValorOriginal = obj.ValorOriginal,
                    ValorDesconto = obj.ValorDesconto,
                    ValorDescontoItem = obj.ValorDescontoItem,
                    ValorIpi = obj.ValorIpi,
                    //PercentualDescontoItem = obj.PercentualDescontoItem,
                    PercentualDescontoItem = percentualDescontoItem,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorOutrasDespesasItem = obj.ValorOutrasDespesasItem,
                    PercentualOutrasDespesasItem = percentualOutrasDespesasItem,
                    ValorTotal = obj.ValorTotal,
                    //ValorTotalItem = obj.ValorTotalItem,
                    ValorTotalItem = valorTotalComDesconto,
                    DescricaoAdicional = obj.DescricaoAdicional,
                    Ncm = obj.InNcm == null ? null : obj.InNcm.Codigo,
                    Componentes = componentes,
                    ImagemItem = imagem != null && imagem.CodeBase64Thumbnail != null ? imagem.CodeBase64Thumbnail : null,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(1, 1, 1),
                    Servico = obj.InProduto != null && obj.InProduto.Servico ? "SERVIÇO" : String.Empty,
                    Grupo = obj.InProduto.InGrupoProduto == null ? null : obj.InProduto.InGrupoProduto.Descricao,
                    ValorIcms = obj.ValorIcms,
                    ValorIcmsSt = obj.ValorIcmsSt,
                    IdentificadorEstoque = obj.IdentificadorEstoque,
                    Referencia = obj.InProduto != null && obj.InProduto.Referencias != null && obj.InProduto.Referencias.Count() > 0
                        ? obj.InProduto.Referencias[0].Ref : ""
                };
            }
        }

        //ORDEM COMPRA USADO EM IMPRESSÕES
        private class OrdemCompraPrint
        {
            public string Codigo { get; set; }
            public string Comprador { get; set; }
            public DateTime DataHora { get; set; }
            public DateTime DataHoraPrevisaoEntrega { get; set; }
            public DateTime DataHoraEntrega { get; set; }
            public string DadosAdicionais { get; set; }
            public int Sequencial { get; set; }
            public string Status { get; set; }
            public string Placa { get; set; }
            public double QtdTotalProdutos { get; set; }
            public double ValorSt { get; set; }
            public double ValorIpi { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorDescontoItens { get; set; }
            public double ValorFrete { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorTotalTributos { get; set; }
            public double ValorTotalProdutos { get; set; }
            public double ValorTotal { get; set; }

            public static explicit operator OrdemCompraPrint(OrdemCompra obj)
            {
                if (obj == null) return null;
                return new OrdemCompraPrint()
                {
                    Codigo = obj.Codigo,
                    Comprador = obj.InFuncionario != null ? obj.InFuncionario.Nome : "",
                    DataHora = obj.DataHora.ToLocalTime(),
                    DataHoraPrevisaoEntrega = obj.DataHoraPrevisaoEntrega.ToLocalTime(),
                    DataHoraEntrega = obj.DataHoraEntrega.ToLocalTime(),
                    DadosAdicionais = obj.DadosAdicionais,
                    Sequencial = obj.Sequencial,
                    Status = obj.Status,
                    Placa = obj.Placa,
                    QtdTotalProdutos = obj.QtdTotalProdutos,
                    ValorSt = obj.ValorSt,
                    ValorIpi = obj.ValorIpi,
                    ValorDesconto = obj.ValorDesconto,
                    ValorDescontoItens = obj.ValorDescontoItens,
                    ValorFrete = obj.ValorFrete,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorTotalTributos = obj.ValorTotalTributos,
                    ValorTotalProdutos = obj.ValorTotalProdutos,
                    ValorTotal = obj.ValorTotal
                };
            }
        }

        //ORDEM COMPRA ITEM USADO EM IMPRESSÕES
        private class OrdemCompraItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string Referencia { get; set; }
            public string UnidadeMedida { get; set; }
            public double Quantidade { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }

            #region Valores
            public double ValorUnitarioCusto { get; set; }
            public double ValorUnitarioCustoTotal { get; set; }
            public double ValorCusto { get; set; }
            public double ValorCustoTotal { get; set; }
            public double ValorUnitarioTributos { get; set; }
            public double ValorTotalTributos { get; set; }
            public double ValorUnitarioSt { get; set; }
            public double ValorSt { get; set; }
            public double ValorUnitarioIpi { get; set; }
            public double ValorIpi { get; set; }
            public double ValorFrete { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorDescontoItem { get; set; }
            #endregion

            public static explicit operator OrdemCompraItemPrint(OrdemCompraItem obj)
            {
                if (obj == null) return null;

                OrdemCompraItemPrint ordemCompraItemPrint = new OrdemCompraItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    Referencia = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA").Ref : obj.InProduto.Referencias[0].Ref,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Quantidade = obj.Quantidade,
                    ValorUnitarioCusto = obj.ValorUnitarioCusto,
                    ValorUnitarioCustoTotal = obj.ValorUnitarioCustoTotal,
                    ValorCusto = (obj.Quantidade * obj.ValorUnitarioCusto) - obj.ValorDescontoItem,
                    ValorCustoTotal = obj.ValorCustoTotal,
                    ValorUnitarioTributos = obj.ValorUnitarioTributos,
                    ValorTotalTributos = obj.ValorTotalTributos,
                    ValorUnitarioSt = obj.ValorUnitarioSt,
                    ValorSt = obj.ValorSt,
                    ValorUnitarioIpi = obj.ValorUnitarioIpi,
                    ValorIpi = obj.ValorIpi,
                    ValorFrete = obj.ValorFrete,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorDesconto = obj.ValorDesconto,
                    ValorDescontoItem = obj.ValorDescontoItem,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(1, 1, 1),
                };

                return ordemCompraItemPrint;
            }
        }

        //ORDEM PRODUÇÃO USADO EM IMPRESSÕES
        private class OrdemProducaoPrint
        {
            public DateTime DataHoraOrdemProducao { get; set; }
            public DateTime DataPrevisaoEntrega { get; set; }
            public DateTime DataHoraAbertura { get; set; }
            public DateTime DataHoraFechamento { get; set; }
            public string CodigoOrdemProducao { get; set; }
            public string Status { get; set; }
            public string Prioridade { get; set; }
            public string Observacao { get; set; }
            public string Terminal { get; set; }
            public string Funcionario { get; set; }
            public int Sequencial { get; set; }
            public List<AcompanhamentoOp> Acompanhamentos { get; set; } = new List<AcompanhamentoOp>();

            public static explicit operator OrdemProducaoPrint(OrdemProducao obj)
            {
                if (obj == null) return null;

                var acompanhamentos = obj.Acompanhamentos != null && obj.Acompanhamentos.Count > 0 ? obj.Acompanhamentos : new List<AcompanhamentoOp>();
                if (acompanhamentos.Count == 0) acompanhamentos.Add(new AcompanhamentoOp() { DadosAdicionais = "SEM ACOMPANHAMENTOS" });

                return new OrdemProducaoPrint()
                {
                    DataHoraOrdemProducao = obj.DataHoraOrdemProducao.ToLocalTime(),
                    DataPrevisaoEntrega = obj.DataHoraPrevisaoEntrega.ToLocalTime(),
                    DataHoraAbertura = obj.DataHoraAbertura.ToLocalTime(),
                    DataHoraFechamento = obj.DataHoraFechamento.ToLocalTime(),
                    CodigoOrdemProducao = obj.CodigoOrdemProducao,
                    Status = obj.Status,
                    Prioridade = obj.Prioridade,
                    Observacao = obj.Observacao,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Funcionario = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Sequencial = obj.Sequencial,
                    Acompanhamentos = acompanhamentos
                };
            }
        }

        //ORDEM PRODUÇÃO ITEM USADO EM IMPRESSÕES
        private class OrdemProducaoItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string Referencia { get; set; }
            public string ReferenciaFornecedor { get; set; }
            public string UnidadeMedida { get; set; }
            public string DadosTecnicos { get; set; }
            public double Quantidade { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorTotal { get; set; }
            public List<OrdemProducaoItemComponentePrint> componentes { get; set; }

            public static explicit operator OrdemProducaoItemPrint(OrdemProducaoItem obj)
            {
                if (obj == null) return null;

                OrdemProducaoItemPrint ordemProducaoItemPrint = new OrdemProducaoItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    Referencia = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA").Ref : obj.InProduto.Referencias[0].Ref,
                    ReferenciaFornecedor = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "COD FORNECEDOR") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "COD FORNECEDOR").Ref : null,                    
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    DadosTecnicos = obj.InProduto != null && obj.InProduto?.DadosTecnicos != null ? obj.InProduto?.DadosTecnicos : null,
                    Quantidade = obj.Quantidade,
                    ValorUnitario = obj.ValorUnitario,
                    ValorTotal = obj.ValorTotal
                };

                ordemProducaoItemPrint.componentes = new List<OrdemProducaoItemComponentePrint>();

                foreach (var componente in obj.Componentes)
                {
                    OrdemProducaoItemComponentePrint ordemProducaoItemComponentePrint = (OrdemProducaoItemComponentePrint)componente;
                    ordemProducaoItemPrint.componentes.Add(ordemProducaoItemComponentePrint);
                }

                ordemProducaoItemPrint.componentes = ordemProducaoItemPrint.componentes.OrderBy(x => x.Etapa).ToList();
                return ordemProducaoItemPrint;
            }
        }

        //ORDEM PRODUÇÃO ITEM COMPONENTE USADO EM IMPRESSÕES
        private class OrdemProducaoItemComponentePrint
        {
            public string IdProduto { get; set; }
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string DescricaoAdicional { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string Referencia { get; set; }
            public string ReferenciaFornecedor { get; set; }
            public string UnidadeMedida { get; set; }
            public string DadosTecnicos { get; set; }
            public double Quantidade { get; set; }
            public double QuantidadePorItem { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorTotal { get; set; }
            public string Etapa { get; set; }
            public string Tempo { get; set; }

            public static explicit operator OrdemProducaoItemComponentePrint(OrdemProducaoItemComponente obj)
            {
                if (obj == null) return null;

                return new OrdemProducaoItemComponentePrint()
                {
                    IdProduto = obj.IdProduto,
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    DescricaoAdicional = !string.IsNullOrEmpty(obj.DescricaoAdicional) ? obj.DescricaoAdicional : "",
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    Referencia = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA").Ref : obj.InProduto.Referencias[0].Ref,
                    ReferenciaFornecedor = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "COD FORNECEDOR") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "COD FORNECEDOR").Ref : null,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    DadosTecnicos = obj.InProduto != null && obj.InProduto?.DadosTecnicos != null ? obj.InProduto?.DadosTecnicos : null,
                    Quantidade = obj.Quantidade,
                    QuantidadePorItem = obj.QuantidadePorItem,
                    ValorUnitario = obj.ValorUnitario,
                    ValorTotal = obj.ValorTotal,
                    Etapa = obj.Etapa,
                    Tempo = obj.Tempo.ToString("T")
                };
            }
        }

        //ORDEM SERVIÇO USADO EM IMPRESSÕES
        private class OrdemServicoPrint
        {
            public DateTime DataOrdemServico { get; set; }
            public DateTime DataPrevisaoEntrega { get; set; }
            public DateTime DataHoraAbertura { get; set; }
            public DateTime DataHoraFechamento { get; set; }
            public string CodigoOrdemServico { get; set; }
            public string Status { get; set; }
            public string Prioridade { get; set; }
            public string Observacao { get; set; }

            public string DescricaoServico { get; set; }
            public string LaudoServico { get; set; }
            public string Terminal { get; set; }
            public string Veiculo { get; set; }
            public string Animal { get; set; }

            public string Equipamento { get; set; }
            public string Funcionario { get; set; }
            public int Sequencial { get; set; }
            public List<Acompanhamento> Acompanhamentos { get; set; } = new List<Acompanhamento>();
            public List<Deslocamento> Deslocamentos { get; set; } = new List<Deslocamento>();
            public string TipoAtendimento { get; set; }

            public static explicit operator OrdemServicoPrint(OrdemServico obj)
            {
                if (obj == null) return null;

                var acompanhamentos = obj.Acompanhamentos != null && obj.Acompanhamentos.Count > 0 ? obj.Acompanhamentos : new List<Acompanhamento>();
                if (acompanhamentos.Count == 0) acompanhamentos.Add(new Acompanhamento() { DadosAdicionais = "SEM ACOMPANHAMENTOS" });;

                return new OrdemServicoPrint()
                {
                    DataOrdemServico = obj.DataOrdemServico.ToLocalTime(),
                    DataPrevisaoEntrega = obj.DataPrevisaoEntrega.ToLocalTime(),
                    DataHoraAbertura = obj.DataHoraAbertura.ToLocalTime(),
                    DataHoraFechamento = obj.DataHoraFechamento.ToLocalTime(),
                    CodigoOrdemServico = obj.CodigoOrdemServico,
                    Status = obj.Status,
                    Prioridade = obj.Prioridade,
                    DescricaoServico = obj.DescricaoServico,
                    LaudoServico = obj.LaudoServico,
                    Observacao = obj.Observacao,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Funcionario = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Sequencial = obj.Sequencial,
                    Acompanhamentos = acompanhamentos,
                    Deslocamentos = obj.Deslocamentos,
                    TipoAtendimento = obj.TipoAtendimento
                };
            }
        }

        //PRODUTO USADO EM IMPRESSÕES
        private class ProdutoPrint
        {
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string UnidadeMedida { get; set; }
            public double QuantidadeEstoque { get; set; }
            public double ValorCusto { get; set; }
            public double ValorVenda { get; set; }

            public static explicit operator ProdutoPrint(Produto obj)
            {
                if (obj == null) return null;
                return new ProdutoPrint()
                {
                    Descricao = obj.Descricao,
                    Codigo = obj.Codigo,
                    CodigoBarras = obj.CodigosBarras[0].Codigo,
                    UnidadeMedida = obj.InUnidadeMedida.Descricao,
                    QuantidadeEstoque = obj.EstoquesDoProduto.Count > 0 ? obj.EstoquesDoProduto[0].Quantidade : 0.0,
                    ValorCusto = obj.CustoTotal,
                    ValorVenda = obj.Precos.Count > 0 ? obj.Precos[0].Valor : 0.0
                };
            }
        }

        //RECEITA USADA EM IMPRESSÕES
        private class ReceitaPrint
        {
            public DateTime DataValidade { get; set; }
            public string CodigoReceita { get; set; }
            public string Paciente { get; set; }
            public string Responsavel { get; set; }
            public string Observacao { get; set; }
            public PrescricaoOtica Prescricao { get; set; }

            public static explicit operator ReceitaPrint(Receita obj)
            {
                if (obj == null) return null;
                return new ReceitaPrint()
                {
                    DataValidade = obj.DataValidade,
                    CodigoReceita = obj.CodigoReceita,
                    Paciente = obj.Paciente,
                    Responsavel = obj.Responsavel,
                    Observacao = obj.Observacao,
                    Prescricao = obj.Prescricao,
                };
            }
        }

        //REVISÃO VEÍCULO USADA EM IMPRESSÕES
        private class RevisaoVeiculoPrint
        {
            public DateTime DataHoraRevisao { get; set; }
            public string KmVeiculoRevisao { get; set; }
            public string DadosExtras { get; set; }
            public string Funcionario { get; set; }

            public static explicit operator RevisaoVeiculoPrint(RevisaoVeiculo obj)
            {
                if (obj == null) return null;
                return new RevisaoVeiculoPrint()
                {
                    DataHoraRevisao = obj.DataHoraRevisao,
                    KmVeiculoRevisao = obj.KmVeiculoRevisao,
                    DadosExtras = obj.DadosExtras,
                    Funcionario = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                };
            }
        }

        //REVISÃO VEÍCULO ITEM USADA EM IMPRESSÕES
        private class RevisaoVeiculoItemPrint
        {
            public string Status { get; set; }
            public string Descricao { get; set; }
            public string Duracao { get; set; }
            public string TipoDuracao { get; set; }

            public static explicit operator RevisaoVeiculoItemPrint(RevisaoVeiculoItem obj)
            {
                if (obj == null) return null;
                return new RevisaoVeiculoItemPrint()
                {
                    Status = obj.Status,
                    Descricao = obj.Descricao,
                    Duracao = obj.Duracao,
                    TipoDuracao = obj.TipoDuracao,
                };
            }
        }

        //PLANO DE TRANSPORTE EM IMPRESSÕES
        private class PlanoTransportePrint
        {
            public string CodigoPlanoTransporte { get; set; }
            public DateTime DataPlanoTransporte { get; set; }
            public DateTime DataPrevisaoEntrega { get; set; }
            public double QuantidadeTotalVolumes { get; set; }
            public double QuantidadeTotalItens { get; set; }
            public string InformacoesAdicionais { get; set; }
            public string Status { get; set; }
            public string Vendedor { get; set; }
            public string Terminal { get; set; }

            public static explicit operator PlanoTransportePrint(PlanoTransporte obj)
            {
                if (obj == null) return null;
                return new PlanoTransportePrint()
                {
                    CodigoPlanoTransporte = obj.CodigoPlanoTransporte,
                    DataPlanoTransporte = obj.DataPlanoTransporte.ToLocalTime(),
                    DataPrevisaoEntrega = obj.DataPrevisaoEntrega.ToLocalTime(),
                    QuantidadeTotalVolumes = obj.QuantidadeTotalVolumes,
                    InformacoesAdicionais = obj.InformacoesAdicionais,
                    Status = obj.Status,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Vendedor = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                };
            }
        }

        //PROCEDIMENTO PETSHOP USADA EM IMPRESSÕES
        private class ProcedimentoPetShopPrint
        {
            public DateTime Data { get; set; }
            public DateTime DataRevisao { get; set; }
            public double Valor { get; set; }

            public string TipoPelo { get; set; }
            public string TipoCirurgia { get; set; }
            public string TipoConsulta { get; set; }
            public string TipoExame { get; set; }
            public DateTime DataPartida { get; set; }


            public static explicit operator ProcedimentoPetShopPrint(ProcedimentoPetShop obj)
            {
                if (obj == null) return null;
                return new ProcedimentoPetShopPrint()
                {
                    Valor = obj.Valor,
                    Data = obj.Data,
                    DataRevisao = obj.DataRevisao,
                    TipoPelo = obj.TipoPelo,
                    TipoCirurgia = obj.TipoCirurgia,
                    TipoConsulta = obj.TipoConsulta,
                    TipoExame = obj.TipoExame,
                    DataPartida = obj.DataPartida,

                };
            }
        }

        //TERMINAL USADO EM IMPRESSÕES
        private class TerminalPrint
        {
            public string Descricao { get; set; }
            public string MensagemAdicionalImpressao { get; set; }

            public static explicit operator TerminalPrint(Terminal obj)
            {
                if (obj == null) return null;
                return new TerminalPrint()
                {
                    Descricao = obj.Descricao,
                    MensagemAdicionalImpressao = obj.MensagemAdicionalImpressao,
                };
            }
        }


        //VEICULO USADO EM IMPRESSÕES
        private class VeiculoPrint
        {
            public DateTime DataKmAtual { get; set; }
            public string Placa { get; set; }
            public string Marca { get; set; }
            public string Modelo { get; set; }
            public string AnoFabricacao { get; set; }
            public string AnoModelo { get; set; }
            public string Cor { get; set; }
            public string Especie { get; set; }
            public string TipoCombustivel { get; set; }
            public string Motor { get; set; }
            public string Chassi { get; set; }
            public string Renavam { get; set; }
            public string KmAtual { get; set; }
            public string MediaKmMes { get; set; }
            public double CapacidadeKg { get; set; }

            public static explicit operator VeiculoPrint(Veiculo obj)
            {
                if (obj == null) return null;
                return new VeiculoPrint()
                {
                    DataKmAtual = obj.DataKmAtual,
                    Placa = obj.Placa,
                    Marca = obj.Marca,
                    Modelo = obj.Modelo,
                    AnoFabricacao = obj.AnoFabricacao,
                    AnoModelo = obj.AnoModelo,
                    Cor = obj.Cor,
                    Especie = obj.Especie,
                    TipoCombustivel = obj.TipoCombustivel,
                    Motor = obj.Motor,
                    Chassi = obj.Chassi,
                    Renavam = obj.Renavam,
                    KmAtual = obj.KmAtual,
                    MediaKmMes = obj.MediaKmMes,
                    CapacidadeKg = obj.CapacidadeKg,
                };
            }
        }
        //ANIMAL USADO EM IMPRESSÕES
        private class AnimalPrint
        {
            public string Nome { get; set; }
            public string Porte { get; set; }
            public double Peso { get; set; }

            public DateTime Nascimento { get; set; }
            public string Pedigree { get; set; }
            public InEspecieAnimal InEspecie { get; set; }
            public InRacaAnimal InRaca { get; set; }
            public InPelagemAnimal InPelagem { get; set; }
            public InCliente InCliente { get; set; }


            public static explicit operator AnimalPrint(Animal obj)
            {
                if (obj == null) return null;
                return new AnimalPrint()
                {
                    Nome = obj.Nome,
                    Porte = obj.Porte,
                    Nascimento = obj.Nascimento,
                    Pedigree = obj.Pedigree,
                    Peso = obj.Peso,
                    InEspecie = obj.InEspecie,
                    InRaca = obj.InRaca,
                    InPelagem = obj.InPelagem,
                    InCliente = obj.InCliente,
                };
            }
        }

        //TRANSFERENCIA ESTOQUE USADA EM IMPRESSÕES
        private class TransferenciaEstoquePrint
        {
            public DateTime DataHoraTransferencia { get; set; }

            public string ObservacaoOrigem { get; set; }
            public string ObservacaoDestino { get; set; }
            public bool NotaGerada { get; set; }
            public string CodigoTransferencia { get; set; }
            public string Usuario { get; set; }
            public string Status { get; set; }

            public static explicit operator TransferenciaEstoquePrint(TransferenciaEstoque obj)
            {
                if (obj == null) return null;
                return new TransferenciaEstoquePrint()
                {
                    DataHoraTransferencia = obj.DataHoraTransferencia.ToLocalTime(),
                    ObservacaoOrigem = obj.ObservacaoOrigem,
                    ObservacaoDestino = obj.ObservacaoDestino,
                    NotaGerada = obj.NotaGerada,
                    CodigoTransferencia = obj.CodigoTransferencia,
                    Usuario = (obj.InUsuario == null) ? null : obj.InUsuario.Nome,
                    Status = obj.Status == null ? null : obj.Status,
                };
            }
        }

        //TRAMSFERENCIA ESTOQUE ITEM USADO EM IMPRESSÕES
        private class TransferenciaEstoqueItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string UnidadeMedida { get; set; }
            public double Quantidade { get; set; }
            public double QuantidadeM3 { get; set; }

            public static explicit operator TransferenciaEstoqueItemPrint(TransferenciaEstoqueItem obj)
            {
                if (obj == null) return null;
                return new TransferenciaEstoqueItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Quantidade = obj.Quantidade,
                    QuantidadeM3 = obj.QuantidadeM3
                };
            }
        }

        //VENDA USADA EM IMPRESSÕES
        private class VendaPrint
        {
            public DateTime DataHoraVenda { get; set; }
            public DateTime DataHoraPrevisaoEntrega { get; set; }
            public double ValorProdutos { get; set; }
            public double ValorServicos { get; set; }
            public double ValorIpi { get; set; }
            public double ValorFrete { get; set; }
            public double ValorSeguro { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorTotal { get; set; }
            public string ValorTotalExtenso { get; set; }
            public double ValorVendaPorEspeciePagamento { get; set; } //Atributo utilizado para romaneio agrupado por espécie de pagamento
            public string DadosAdicionais { get; set; }
            public string ObservacaoEntrega { get; set; }
            public bool Consignada { get; set; }
            public string CodigoVenda { get; set; }
            public string Terminal { get; set; }
            public string Vendedor { get; set; }
            public string Titulo { get; set; }
            public string Usuario { get; set; }
            public string Status { get; set; }
            public int Sequencial { get; set; }
            public double QtdeItens { get; set; }
            public double PesoTotalLiquidoVenda { get; set; }
            public double PesoTotalVenda { get; set; }
            public string TelefoneVendedor { get; set; }
            public double PontosFidelidade { get; set; }
            public string Servico { get; set; }
            public List<Cobrancas> VendaCobranca { get; set; }
            public InVeiculo Veiculo { get; set; }
            public double KmVeiculo { get; set; }
            public InEquipamento Equipamento { get; set; }
            public string Tecnico { get; set; }

            public static explicit operator VendaPrint(Venda obj)
            {
                if (obj == null) return null;
                return new VendaPrint()
                {
                    DataHoraVenda = obj.DataHoraVenda.ToLocalTime(),
                    DataHoraPrevisaoEntrega = obj.DataHoraPrevisaoEntrega.ToLocalTime(),
                    ValorProdutos = obj.ValorProdutos,
                    ValorServicos = obj.ValorServicos,
                    ValorIpi = obj.ValorIpi,
                    ValorFrete = obj.ValorFrete,
                    ValorSeguro = obj.ValorSeguro,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorDesconto = obj.ValorDesconto,
                    ValorTotal = obj.ValorTotal,
                    Titulo = obj.Titulo,
                    DadosAdicionais = obj.DadosAdicionais,
                    ObservacaoEntrega = obj.ObservacaoEntrega,
                    Consignada = obj.Consignada,
                    CodigoVenda = obj.CodigoVenda,
                    Terminal = obj.InTerminal == null ? null : obj.InTerminal.Descricao,
                    Vendedor = obj.InFuncionario == null ? null : obj.InFuncionario.Nome,
                    Usuario = (obj.InFuncionario == null || obj.InFuncionario.InUsuario == null) ? null : obj.InFuncionario.InUsuario.Nome,
                    Status = obj.InStatus == null ? null : obj.InStatus.Descricao,
                    Sequencial = obj.Sequencial,
                    QtdeItens = obj.QtdeTotalItens,
                    PesoTotalLiquidoVenda = obj.Itens.Sum(x => x.InProduto.PesoLiquidoProduto * x.Quantidade),
                    PesoTotalVenda = obj.Itens.Sum(x => x.InProduto.PesoProduto * x.Quantidade),
                    PontosFidelidade = obj.PontosFidelidade,
                    VendaCobranca = obj.VendaCobranca,
                    Veiculo = obj.InVeiculo,
                    KmVeiculo = obj.KmVeiculo,
                    Equipamento = obj.InEquipamento,
                    ValorTotalExtenso = DoubleToExtenso.NumeroExtenso(((decimal)obj.ValorTotal)),
                    Tecnico = obj.InTecnico == null  ? null : obj.InTecnico.Nome
                };
            }
        }

        //SERVICO TERCEIRIZADO USADO EM IMPRESSÕES
        private class ServicoTerceirizadoPrint
        {
            public DateTime DataHoraEmissao { get; set; }
            public DateTime DataHoraPrevisaoEntrega { get; set; }
            public DateTime? DataHoraEntrega { get; set; }
            public string CodigoServicoTerceirizado { get; set; }
            public int Sequencial { get; set; }
            public string Status { get; set; }
            public string Descricao { get; set; }
            public string DadosAdicionais { get; set; }
            public string Segmento { get; set; }
            public bool FinanceiroGerado { get; set; }
            public double QtdeTotalItensServicos { get; set; }
            public double QtdeTotalItensProdutos { get; set; }
            public double ValorServicos { get; set; }
            public double ValorTotal { get; set; }


            public static explicit operator ServicoTerceirizadoPrint(ServicoTerceirizado obj)
            {
                if (obj == null) return null;
                return new ServicoTerceirizadoPrint()
                {
                    DataHoraEmissao = obj.DataHoraEmissao.ToLocalTime(),
                    DataHoraPrevisaoEntrega = obj.DataHoraPrevisaoEntrega.ToLocalTime(),
                    DataHoraEntrega = obj.DataHoraEntrega,
                    CodigoServicoTerceirizado = obj.CodigoServicoTerceirizado,
                    Sequencial = obj.Sequencial,
                    Status = obj.Status,
                    Descricao = obj.Descricao,
                    Segmento = obj.Segmento,
                    FinanceiroGerado = obj.FinanceiroGerado,
                    QtdeTotalItensServicos = obj.QtdeTotalItensServicos,
                    QtdeTotalItensProdutos = obj.QtdeTotalItensProdutos,
                    ValorTotal = obj.ValorTotal,
                };
            }
        }

        //VENDA ITEM USADO EM IMPRESSÕES
        private class VendaItemPrint
        {
            public int Item { get; set; }
            public string Descricao { get; set; }
            public string DescricaoAdicional { get; set; }
            public string Codigo { get; set; }
            public string CodigoBarras { get; set; }
            public string Referencia { get; set; }
            public string UnidadeMedida { get; set; }
            public string Grupo { get; set; }
            public double Quantidade { get; set; }
            public double QuantidadeM3 { get; set; }
            public string NumeroSerie { get; set; }
            public string DadosAdicionais { get; set; }
            public double ValorUnitario { get; set; }
            public double ValorOriginal { get; set; }
            public double ValorDesconto { get; set; }
            public double ValorDescontoItem { get; set; }
            public double PercentualDescontoItem { get; set; }
            public double ValorOutrasDespesas { get; set; }
            public double ValorOutrasDespesasItem { get; set; }
            public double PercentualOutrasDespesasItem { get; set; }
            public double ValorIpi { get; set; }
            public double ValorTotal { get; set; }
            public double ValorTotalItem { get; set; }
            public double PesoUnitarioLiquidoProduto { get; set; }
            public double PesoUnitarioProduto { get; set; }
            public string IdentificadorEstoque { get; set; }
            public string Aplicacoes { get; set; }
            public string DadosExtras { get; set; }
            public string DadosTecnicos { get; set; }
            public string GrupoPreco { get; set; }
            public string NumeroCA { get; set; }
            public DateTime ValidadeCA { get; set; }
            public string Servico { get; set; }
            public List<VendaComponenteItem> Componentes { get; set; }
            public double ValorIcms { get; set; }
            public double ValorIcmsSt { get; set; }
            public double Comprimento { get; set; }

            public static explicit operator VendaItemPrint(VendaItem obj)
            {
                if (obj == null) return null;
                var percentualDescontoItem = Math.Round((obj.ValorDescontoItem / obj.Quantidade) / obj.ValorUnitario * 100, 2, MidpointRounding.AwayFromZero);
                var percentualOutrasDespesasItem = Math.Round((obj.ValorOutrasDespesasItem / obj.Quantidade) / obj.ValorUnitario * 100, 2, MidpointRounding.AwayFromZero);
                var valorUnitarioComDesconto = Math.Round(obj.ValorUnitario * (1 - (percentualDescontoItem / 100)), 2, MidpointRounding.AwayFromZero);
                var valorTotalComDesconto = Math.Round(obj.ValorTotalItem * (1 - (percentualDescontoItem / 100)), 2, MidpointRounding.AwayFromZero);

                var componentes = obj.Componentes != null && obj.Componentes.Count > 0 ? obj.Componentes : new List<VendaComponenteItem>();
                if (componentes.Count == 0) componentes.Add(new VendaComponenteItem() { Descricao = "SEM COMPONENTES" });

                foreach (var componente in obj.Componentes)
                {
                    if (string.IsNullOrEmpty(componente.CodigoProduto))
                    {
                        var produto = ProdutoRepository.getInstance().GetById(componente.IdProduto, true).Result;
                        componente.CodigoProduto = produto != null ? produto.Codigo : "";
                    }
                }

                return new VendaItemPrint()
                {
                    Item = obj.Item,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    CodigoBarras = (obj.InProduto == null || obj.InProduto.CodigosBarras == null || obj.InProduto.CodigosBarras.Count == 0) ? null : obj.InProduto.CodigosBarras[0].Codigo,
                    Referencia = (obj.InProduto == null || obj.InProduto.Referencias == null || obj.InProduto.Referencias.Count == 0) ? null : obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA") != null ?
                                  obj.InProduto.Referencias.Find(r => r.Descricao.ToUpper() == "REFERÊNCIA" || r.Descricao.ToUpper() == "REFERÊNCIA").Ref : obj.InProduto.Referencias[0].Ref,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    Grupo = obj.InProduto.InGrupoProduto == null ? null : obj.InProduto.InGrupoProduto.Descricao,
                    Quantidade = obj.Quantidade,
                    QuantidadeM3 = obj.QuantidadeM3,
                    NumeroSerie = obj.NumeroSerie,
                    DadosAdicionais = obj.DadosAdicionais,
                    ValorUnitario = obj.ValorUnitario,
                    //ValorUnitario = valorUnitarioComDesconto,
                    ValorOriginal = obj.ValorOriginal,
                    ValorDesconto = obj.ValorDesconto,
                    ValorDescontoItem = obj.ValorDescontoItem,
                    PercentualDescontoItem = percentualDescontoItem,
                    ValorOutrasDespesas = obj.ValorOutrasDespesas,
                    ValorOutrasDespesasItem = obj.ValorOutrasDespesasItem,
                    PercentualOutrasDespesasItem = percentualOutrasDespesasItem,
                    ValorIpi = obj.ValorIpi,
                    //PercentualDescontoItem = obj.PercentualDescontoItem,
                    ValorTotal = obj.ValorTotal,
                    //ValorTotalItem = obj.ValorTotalItem,
                    ValorTotalItem = valorTotalComDesconto,
                    PesoUnitarioLiquidoProduto = obj.InProduto == null ? 0 : obj.InProduto.PesoLiquidoProduto,
                    PesoUnitarioProduto = obj.InProduto == null ? 0 : obj.InProduto.PesoProduto,
                    IdentificadorEstoque = obj.IdentificadorEstoque,
                    DescricaoAdicional = obj.DescricaoAdicional,
                    Componentes = componentes,
                    Aplicacoes = obj.InProduto != null ? obj.InProduto.Aplicacoes : null,
                    DadosExtras = obj.InProduto != null ? obj.InProduto.DadosExtras : null,
                    DadosTecnicos = obj.InProduto != null ? obj.InProduto.DadosTecnicos : null,
                    GrupoPreco = obj.InProduto != null && obj.InProduto.InGrupoPreco != null ? obj.InProduto.InGrupoPreco.Descricao : null,
                    NumeroCA = obj.InProduto != null ? obj.InProduto.NumeroCA : null,
                    ValidadeCA = obj.InProduto != null ? obj.InProduto.ValidadeCA : new DateTime(),
                    Servico = obj.InProduto != null && obj.InProduto.Servico ? "SERVIÇO" : String.Empty,
                    ValorIcms = obj.ValorIcms,
                    ValorIcmsSt = obj.ValorIcmsSt,
                    Comprimento = obj.Comprimento
                };
            }
        }

        //ROMANEIO VENDA ITEM USADA EM IMPRESSÕES DE PLANO DE TRANSPORTE
        private class VendaItemRomaneioPrint
        {
            public string Codigo { get; set; }
            public string Descricao { get; set; }
            public double Quantidade { get; set; }
            public string UnidadeMedida { get; set; }
            public string GrupoProduto { get; set; }

            public static explicit operator VendaItemRomaneioPrint(VendaItem obj)
            {
                if (obj == null) return null;
                return new VendaItemRomaneioPrint()
                {
                    Codigo = obj.InProduto == null ? null : obj.InProduto.Codigo,
                    Descricao = (!string.IsNullOrEmpty(obj.Descricao) ? obj.Descricao : (obj.InProduto == null ? "" : obj.InProduto.Descricao)),
                    Quantidade = obj.Quantidade,
                    UnidadeMedida = obj.InUnidadeMedida == null ? null : obj.InUnidadeMedida.Descricao,
                    GrupoProduto = obj.InProduto != null && obj.InProduto.InGrupoProduto != null ? obj.InProduto.InGrupoProduto.Descricao : null
                };
            }
        }

        //VENDA ROMANEIO USADO EM IMPRESSÕES DE PLANO DE TRANSPORTE
        private class VendaRomaneioPrint
        {
            public VendaPrint Venda { get; set; }
            public List<VendaItemPrint> VendaItens { get; set; } = new List<VendaItemPrint>();
            public ClientePrint Cliente { get; set; }
            public Nf NfeVinculada { get; set; }
            public EspeciesPorExtensoRomaneioPrint TotalEspeciesPorExtenso { get; set; }

            public VendaRomaneioPrint(VendaPrint venda, List<VendaItemPrint> vendaItens, ClientePrint cliente, Nf nfeVinculada)
            {
                Venda = venda;
                VendaItens = vendaItens;
                Cliente = cliente;
                NfeVinculada = nfeVinculada;
            }
        }

        //COBRANÇA ROMANEIO USADO EM IMPRESSÕES DE PLANO DE TRANSPORTE
        private class CobrancaRomaneioPrint
        {
            public string CondicaoPagamento { get; set; }
            public string EspeciePagamento { get; set; }
            public double Valor { get; set; }
            public List<VendaRomaneioPrint> VendasRomaneio { get; set; } = new List<VendaRomaneioPrint>();

            public CobrancaRomaneioPrint(Cobrancas obj)
            {
                CondicaoPagamento = obj.InCondicaoPagamento.Descricao;
                EspeciePagamento = obj.InEspeciePagamento.Descricao;
                Valor = obj.Valor;
            }
        }

        //EspeciesPagamento por extenso dinheiro/credito/etc USADO EM IMPRESSÕES DE PLANO DE TRANSPORTE
        private class EspeciesPorExtensoRomaneioPrint
        {
            public string EspeciesPagamentoNfeVinculada { get; set; }
            public string EspeciesPagamentoVenda { get; set; }

            public EspeciesPorExtensoRomaneioPrint(string especiesVendaToString, string especiesNfeVinculadaToString)
            {
                EspeciesPagamentoNfeVinculada = especiesNfeVinculadaToString;
                EspeciesPagamentoVenda = especiesVendaToString;
            }
        }

        //Pode ser Cliente ou Fornecedor
        private class DestinatarioPrint
        {
            public string NomeRazaoSocial { get; set; }
            public string ApelidoNomeFantasia { get; set; }
            public string CpfCnpj { get; set; }
            public string RgIe { get; set; }
            public int Codigo { get; set; }
            public double PontosFidelidade { get; set; }
            public Endereco Endereco { get; set; }
            public Email Email { get; set; }
            public Telefone Telefone { get; set; }
            public double SaldoDevedor { get; set; }

            public DestinatarioPrint(Cliente objCliente, Fornecedor objFornecedor)
            {
                if (objCliente != null && objFornecedor == null)
                {
                    NomeRazaoSocial = objCliente.NomeRazaoSocial;
                    ApelidoNomeFantasia = objCliente.ApelidoNomeFantasia;
                    CpfCnpj = objCliente.CpfCnpj;
                    RgIe = objCliente.RgIe;
                    Codigo = objCliente.Codigo;
                    PontosFidelidade = objCliente.PontosFidelidade;
                    Endereco = objCliente.getEnderecoPrincipal();
                    Telefone = objCliente.getTelefonePrincipal();
                    Email = objCliente.getEmailPrincipal();
                    SaldoDevedor = 0;
                }
                else if (objCliente == null && objFornecedor != null)
                {
                    NomeRazaoSocial = objFornecedor.NomeRazaoSocial;
                    ApelidoNomeFantasia = objFornecedor.ApelidoNomeFantasia;
                    CpfCnpj = objFornecedor.CpfCnpj;
                    RgIe = objFornecedor.RgIe;
                    Codigo = objFornecedor.Codigo;
                    PontosFidelidade = 0;
                    Endereco = objFornecedor.getEnderecoPrincipal();
                    Telefone = objFornecedor.getTelefonePrincipal();
                    Email = objFornecedor.getEmailPrincipal();
                    SaldoDevedor = 0;
                }
            }
        }
        #endregion

        //Gera o etiqueta layout para impressão em etiquetas de bobina (Argox, Zebra, Elgin)
        public async Task<string> GerarLayoutEtiqueta(string idRegistro)
        {
            try
            {
                string ret = string.Empty;
                Etiqueta etiqueta = EtiquetaRepository.getInstance().GetById(idRegistro, true).Result;  //pega as definições de etiqueta do user logado
                EtiquetaLayout etiquetaLayout = EtiquetaLayoutRepository.getInstance().GetById(etiqueta.IdLayoutEtiquetaPadrao, true).Result;  //pega cadastro da etiqueta layout
                JsonPrintEtiqueta jsonPrintEtiqueta = new JavaScriptSerializer().Deserialize<JsonPrintEtiqueta>(GetJsonEtiqueta(idRegistro));  //pega o json pronto com as etiquetas dentro

                switch (etiquetaLayout.MarcaImpressora)
                {
                    case "ARGOX":
                        ret = GetLayoutEtiquetaArgox(etiqueta, etiquetaLayout, jsonPrintEtiqueta);
                        break;
                    case "ELGIN":
                        ret = GetLayoutEtiquetaElgin(etiqueta, etiquetaLayout, jsonPrintEtiqueta);
                        break;
                    case "ZEBRA":
                        ret = GetLayoutEtiquetaZebra(etiqueta, etiquetaLayout, jsonPrintEtiqueta);
                        break;
                    default:
                        break;
                }
                return ret;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //Gera o arquivo bat para impressão em etiquetas de bobina (Argox, Zebra)
        public async Task<string> GerarBatImprimirEtiqueta(string idRegistro)
        {
            try
            {
                Etiqueta etiqueta = await EtiquetaRepository.getInstance().GetById(idRegistro, true);  //pega as definições de etiqueta do user logado
                EtiquetaLayout etiquetaLayout = await EtiquetaLayoutRepository.getInstance().GetById(etiqueta.IdLayoutEtiquetaPadrao, true);  //pega cadastro da etiqueta layout

                using (MemoryStream ms = new MemoryStream())
                using (StreamWriter sw = new StreamWriter(ms))
                {
                    sw.WriteLine($"copy Layout.txt \"{etiquetaLayout.DiretorioImpressora}\"");  //manda imprimir layout
                    sw.WriteLine($"del Layout.txt");  //exclui layout
                    sw.WriteLine($"(goto) 2>nul & del \"%~f0\"");  //exclui próprio bat
                    sw.Flush();
                    return Convert.ToBase64String(ms.ToArray());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //MONTA LAYOUT ARGOX
        private string GetLayoutEtiquetaArgox(Etiqueta etiqueta, EtiquetaLayout etiquetaLayout, JsonPrintEtiqueta jsonPrintEtiqueta)
        {
            int colAtual = 1;  //coluna atual
            int distXColAtual = 0;  //distância na impressão de uma coluna pra outra
            string textoEtiq = string.Empty;
            var lastItem = jsonPrintEtiqueta.EtiquetaItem.LastOrDefault();

            using (MemoryStream ms = new MemoryStream())
            using (StreamWriter sw = new StreamWriter(ms))
            {
                foreach (EtiquetaItemPrint item in jsonPrintEtiqueta.EtiquetaItem)
                {
                    //Se for para imprimir cria o layout, se não, passa para o próximo item
                    if (!item.NaoImprimir)
                    {
                        if (colAtual == 1)  //só imprime comandos iniciais na coluna 1
                        {
                            sw.WriteLine((char)2 + "m");
                            sw.WriteLine((char)2 + "L");
                            sw.WriteLine("L");
                            sw.WriteLine("H" + etiquetaLayout.TemperaturaImpressao.ToString().PadLeft(2, '0'));
                            sw.WriteLine("D11");
                            sw.WriteLine("C0010");
                        }

                        foreach (EtiquetaLayoutDef def in etiquetaLayout.EtiquetaLayoutDefs)
                        {
                            if (def.TipoCampo.Equals("CAMPO LIVRE"))
                                textoEtiq = def.Dados;

                            else if (def.TipoCampo.Equals("CAMPO DE DADOS"))
                            {
                                textoEtiq = item.GetType().GetProperty(def.Dados).GetValue(item, null).ToString();
                            }


                            if (textoEtiq.Length >= def.InicioCaracteresLinha)
                            {
                                //faz o corte da string com posição inicial
                                textoEtiq = textoEtiq.Substring(def.InicioCaracteresLinha - 1);
                                //faz o corte da string com quantidade de caracteres
                                textoEtiq = textoEtiq.Substring(0, textoEtiq.Length < def.MaximoCaracteresLinha ? textoEtiq.Length : (textoEtiq.Length > def.MaximoCaracteresLinha ? def.MaximoCaracteresLinha : textoEtiq.Length));

                                if (colAtual == 1)  //se for a coluna 1 não tem deslocamento eixo X
                                    distXColAtual = 0;
                                else  //porém se for coluna 2 ou superior, tem o deslocamento da impressão entre elas
                                    distXColAtual = (colAtual - 1) * etiquetaLayout.DistanciaColunasBobina;

                                //junta as informações formatação, posição Y, posição X e adiciona no arquivo
                                sw.WriteLine(def.Formatacao.Replace(" ", "") + def.PosicaoEixoY.ToString().PadLeft(4, '0') + (def.PosicaoEixoX + distXColAtual).ToString().PadLeft(4, '0') + Functions.RemoveAccents(textoEtiq));
                            }
                        }

                        if (colAtual == etiquetaLayout.QuantidadeColunasBobina || lastItem.Equals(item))  //só imprime comandos finais na coluna máxima ou se for último registro
                        {
                            sw.WriteLine("Q0001");
                            sw.WriteLine("E");
                            colAtual = 1;
                        }
                        else
                            colAtual++;

                    }
                }
                sw.Flush();
                return Convert.ToBase64String(ms.ToArray());
            }
        }

        //MONTA LAYOUT ELGIN
        private string GetLayoutEtiquetaElgin(Etiqueta etiqueta, EtiquetaLayout etiquetaLayout, JsonPrintEtiqueta jsonPrintEtiqueta)
        {
            int colAtual = 1;  //coluna atual
            int distXColAtual = 0;  //distância na impressão de uma coluna pra outra
            string prefixo = string.Empty;
            string textoEtiq = string.Empty;
            var lastItem = jsonPrintEtiqueta.EtiquetaItem.LastOrDefault();

            using (MemoryStream ms = new MemoryStream())
            using (StreamWriter sw = new StreamWriter(ms))
            {
                foreach (EtiquetaItemPrint item in jsonPrintEtiqueta.EtiquetaItem)
                {
                    if (!item.NaoImprimir)
                    {
                        if (colAtual == 1)  //só imprime comandos iniciais na coluna 1
                        {
                            sw.WriteLine("N"); //limpa o buffer de impressão, para ser iniciado um novo arquivo
                            sw.WriteLine("D" + etiquetaLayout.TemperaturaImpressao.ToString());
                            sw.WriteLine("ZB"); //direção da impressão B=começa de baixo para cima
                            sw.WriteLine("I8,A,003"); // Code page
                            sw.WriteLine("S3"); //Velocidade de impressão

                            //Cabeçalho igual do VB para teste
                            //sw.WriteLine("R0,0"); //Configura o ponto de referência para o início da impressão: RdistanciaHorizontal,distanciaVertical
                            //sw.WriteLine("ZB"); //Direção da impressão B=começa de baixo para cima
                            //sw.WriteLine("I8,0,001"); //Seleciona a "code page"
                            //sw.WriteLine("q680"); //Configura a largura de impressão, em pontos (cada 8 pontos = 1mm).
                            //sw.WriteLine("S3"); //Velocidade de impressão
                            //sw.WriteLine("O"); //Configuração da impressora, O = Transferência térmica (utiliza ribbon)
                            //sw.WriteLine("JF"); //Ajusta o modo de saída do papel, JF = habilita o Backfeed (o GAP para sobre a serrilha, para corte manual)
                        }

                        foreach (EtiquetaLayoutDef def in etiquetaLayout.EtiquetaLayoutDefs)
                        {
                            prefixo = "A";

                            if (def.TipoCampo.Equals("CAMPO LIVRE"))
                                textoEtiq = def.Dados;

                            else if (def.TipoCampo.Equals("CAMPO DE DADOS"))
                            {
                                if (def.Dados.Equals("IdentificadorBarras")) prefixo = "B";
                                textoEtiq = item.GetType().GetProperty(def.Dados).GetValue(item, null).ToString();
                            }

                            //faz o corte da string com posição inicial
                            //if (textoEtiq.Length <= def.InicioCaracteresLinha)
                            if (textoEtiq.Length < def.InicioCaracteresLinha) //Alterei pra menor porque quando o texto tinha tamanho 1 e o InicioCaracteresLinha era 1, o campo ficava em branco. Exemplo, quantidade "3" na qtd atacado, ficava vazio - Camila 17/06/2022
                            {
                                textoEtiq = "  ";
                            }
                            else
                            {
                                textoEtiq = textoEtiq.Substring(def.InicioCaracteresLinha - 1);
                            }
                            //faz o corte da string com quantidade de caracteres e remove os acentos
                            textoEtiq = (textoEtiq.Substring(0, textoEtiq.Length < def.MaximoCaracteresLinha ? textoEtiq.Length : (textoEtiq.Length > def.MaximoCaracteresLinha ? def.MaximoCaracteresLinha : textoEtiq.Length)));

                            if (colAtual == 1)  //se for a coluna 1 não tem deslocamento eixo X
                                distXColAtual = 0;
                            else  //porém se for coluna 2 ou superior, tem o deslocamento da impressão entre elas
                                distXColAtual = (colAtual - 1) * etiquetaLayout.DistanciaColunasBobina;

                            //junta as informações formatação, posição Y, posição X e adiciona no arquivo
                            sw.WriteLine($"{prefixo}{(def.PosicaoEixoX + distXColAtual).ToString()},{def.PosicaoEixoY.ToString()},{def.Formatacao.Replace(" ", "")},\"{Functions.RemoveAccents(textoEtiq)}\"");
                        }

                        if (colAtual == etiquetaLayout.QuantidadeColunasBobina || lastItem.Equals(item))  //só imprime comandos finais na coluna máxima ou se for último registro
                        {
                            sw.WriteLine("P1,1"); //P=Mandar imprimir; 1=número de etiquetas; 1=número de cópias identicas da etiqueta
                            colAtual = 1;
                        }
                        else
                            colAtual++;
                    }
                }
                sw.Flush();
                return Convert.ToBase64String(ms.ToArray());
            }
        }

        //MONTA LAYOUT ZEBRA
        private string GetLayoutEtiquetaZebra(Etiqueta etiqueta, EtiquetaLayout etiquetaLayout, JsonPrintEtiqueta jsonPrintEtiqueta)
        {
            int colAtual = 1;  //coluna atual
            int distXColAtual = 0;  //distância na impressão de uma coluna pra outra
            string prefixo = string.Empty;
            string textoEtiq = string.Empty;
            var lastItem = jsonPrintEtiqueta.EtiquetaItem.LastOrDefault();

            using (MemoryStream ms = new MemoryStream())
            using (StreamWriter sw = new StreamWriter(ms))
            {
                foreach (EtiquetaItemPrint item in jsonPrintEtiqueta.EtiquetaItem)
                {
                    if (!item.NaoImprimir)
                    {
                        if (colAtual == 1)  //só imprime comandos iniciais na coluna 1
                        {
                            sw.WriteLine("N");
                            sw.WriteLine("ZB");
                            sw.WriteLine("D" + etiquetaLayout.TemperaturaImpressao.ToString());
                            sw.WriteLine("I8,A,003");
                        }

                        foreach (EtiquetaLayoutDef def in etiquetaLayout.EtiquetaLayoutDefs)
                        {
                            prefixo = "A";

                            if (def.TipoCampo.Equals("CAMPO LIVRE") || def.TipoCampo.Equals("CAMPO IMAGEM"))
                                textoEtiq = def.Dados;

                            else if (def.TipoCampo.Equals("CAMPO DE DADOS"))
                            {
                                if (def.Dados.Equals("IdentificadorBarras")) prefixo = "B";
                                textoEtiq = item.GetType().GetProperty(def.Dados).GetValue(item, null).ToString();
                            }

                            if (textoEtiq.Length >= def.InicioCaracteresLinha)
                            {
                                //faz o corte da string com posição inicial
                                textoEtiq = textoEtiq.Substring(def.InicioCaracteresLinha - 1);
                                //faz o corte da string com quantidade de caracteres
                                textoEtiq = textoEtiq.Substring(0, textoEtiq.Length < def.MaximoCaracteresLinha ? textoEtiq.Length : (textoEtiq.Length > def.MaximoCaracteresLinha ? def.MaximoCaracteresLinha : textoEtiq.Length));

                                if (colAtual == 1)  //se for a coluna 1 não tem deslocamento eixo X
                                    distXColAtual = 0;
                                else  //porém se for coluna 2 ou superior, tem o deslocamento da impressão entre elas
                                    distXColAtual = (colAtual - 1) * etiquetaLayout.DistanciaColunasBobina;

                                if (def.TipoCampo.Equals("CAMPO IMAGEM"))
                                {
                                    // para impressão do logo precisa formatação antes das posições
                                    sw.WriteLine($"{def.Formatacao.Replace(" ", "")}{(def.PosicaoEixoX + distXColAtual).ToString()},{def.PosicaoEixoY.ToString()},\"{textoEtiq}\"");
                                }
                                else
                                {
                                    //junta as informações formatação, posição Y, posição X e adiciona no arquivo
                                    sw.WriteLine($"{prefixo}{(def.PosicaoEixoX + distXColAtual).ToString()},{def.PosicaoEixoY.ToString()},{def.Formatacao.Replace(" ", "")},\"{textoEtiq}\"");
                                }
                            }
                        }

                        if (colAtual == etiquetaLayout.QuantidadeColunasBobina || lastItem.Equals(item))  //só imprime comandos finais na coluna máxima ou se for último registro
                        {
                            sw.WriteLine("ZB*");
                            sw.WriteLine("P1");
                            colAtual = 1;
                        }
                        else
                            colAtual++;
                    }
                }
                sw.Flush();
                return Convert.ToBase64String(ms.ToArray());
            }
        }

    }
}